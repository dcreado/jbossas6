<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================================ -->
<!--  JBoss, the OpenSource J2EE webOS                            -->
<!--  Distributable under LGPL license.                           -->
<!--  See terms of license at http://www.gnu.org.                 -->
<!-- ============================================================ -->

<!-- $Id: build.xml 112098 2011-08-19 18:03:59Z thauser@redhat.com $ -->

<project default="main" name="JBoss/Testsuite"
         xmlns:server="http://jboss.org/ns/test/ant/server"
         xmlns:maven="antlib:org.apache.maven.artifact.ant">
   
  <!-- Define the environment variable prefix. This needs to be first. -->
  <property environment="env"/>

  <!-- Setup the project environment. -->
  <dirname property="project.root" file="${basedir}"/>
  <property name="project.tools" value="${project.root}/tools"/>

  <xmlproperty file="pom.xml" prefix="pom"/>
  <property name="version" value="${pom.project.parent.version}"/>

  <!-- Set junit.jvm home to same jre used by Ant -->
  <property name="junit.jvm" location="${java.home}/bin/java"/>
  
  <!-- Load common task properties -->
  <property file="imports/task.properties"/>
  
  <!-- Setup the module environment. -->
  <property name="module.root" value="${basedir}"/>
  <property file="${module.root}/local.properties"/>
  <property name="module.source" value="${module.root}/src"/>
  <property name="module.output" value="${module.root}/output"/>
  
  <property name="/" value="${file.separator}"/>

  <!-- Tests requiring separate server configurations -->
  <import file="imports/config/configs.xml"/>

  <!-- ======================================================== -->
  <!-- Check current environment                                -->
  <!-- ======================================================== -->
 <target name="check-env">
   
   <!-- Make sure we have the right version of Ant -->
   <property name="ant16.baseversion" value="1.6"/>
   <property name="ant17.baseversion" value="1.7"/>
   <property name="ant18.baseversion" value="1.8"/>

   <!--
      | Add new conditions for other supported Ant versions when they
      | become avaialble.
    -->

   <condition property="ant.compatible">
     <or>
       <contains string="${ant.version}"
             substring="Ant version ${ant16.baseversion}"/>
       <contains string="${ant.version}"
             substring="Ant version ${ant17.baseversion}"/>
       <contains string="${ant.version}"
             substring="Ant version ${ant18.baseversion}"/>
     </or>
   </condition>

   <fail unless="ant.compatible">
   Unsupported Ant version: ${ant.version}
   Please install a version which is compatible with Ant ${ant16.baseversion}.
   </fail>

   <!-- JDK Detection -->
   <available classname="java.lang.StrictMath" property="HAVE_JDK_1.3"/>
   <available classname="java.lang.StackTraceElement" property="HAVE_JDK_1.4"/>
   <available classname="java.lang.Enum" property="HAVE_JDK_1.5"/>
   <available classname="java.lang.management.LockInfo" property="HAVE_JDK_1.6"/>
   
   <!--JDK Vendor Detection -->
   <condition property="IBM_JDK">
     <not>
       <available classname="com.sun.net.ssl.internal.ssl.Provider"/>
     </not>
   </condition>

   <fail message="The testsuite build requires JDK1.6" unless="HAVE_JDK_1.6"/>
     
 </target>
  
  
   <!-- ======================================================== -->
   <!-- Initialization                                           -->
   <!-- ======================================================== -->
   <tstamp>
      <format property="TIMENOW" pattern="yyyy-MM-dd.HH-mm" timezone="GMT"/>
   </tstamp>
   <echo message="${TIMENOW}" file="run.tstamp"/>

   <property name="results_web" value="http://jboss.sourceforge.net/junit-results/32"/>
   <property name="buildlog.level" value="info" />
   <property environment="env"/>

   <!-- Set a hostname property based on COMPUTERNAME for win32, HOSTNAME
   otherwise and initialize the node0/node1 cluster hostnames to localhost
   and ${hostname} by default. If you cannot route multicast traffic between
   localhost and hostname, then you need to specify node0 and node1 binding
   in the local.properties that can in order to be able to run the clustering
   tests.
   -->
   <condition property="hostname" value="${env.COMPUTERNAME}">
      <os family="windows"/>
   </condition>
   <condition property="hostname" value="${env.HOSTNAME}">
      <not>
         <os family="windows"/>
      </not>
   </condition>

   <!--We will use local.properties file to provide some configuration
       to the testsuite mainly for the Clustering framework. Please
       do not checkin your local.properties file into CVS-->
   <property file="local.properties"/>

   <!-- Set a property if we know this is a Sun VM. Can be
        used to enable/disable things based on VM vendor -->
   <condition property="sun-vm" value="true">
   	  <and>
         <equals arg1="Sun Microsystems Inc." arg2="${java.vendor}" trim="true"/>
   	  	 <not>
   	  	 	<!-- Pass -Dignore.sun-vm.override=true to ant to bypass
   	  	 	     enabling/disabling things based on Sun being VM vendor -->
   	  	 	<isset property="ignore.sun-vm.override"/>
   	  	 </not>
   	  </and>
   </condition>

   <!-- Cluster node0 defaults -->
   <property name="node0" value="localhost" />
   <!-- node0.url is a hostname or IP literal suitable for embedding in URLs -->
   <condition property="node0.url" value="[${node0}]" else="${node0}">
   	 <contains string="${node0}" substring=":"/>
   </condition>	
   <property name="node0.http.url" value="http://${node0.url}:8080" />
   <property name="node0.jndi.url" value="jnp://${node0.url}:1099" />
   <property name="node0.hajndi.url" value="jnp://${node0.url}:1100" />
   <property name="node0.jndi.http.url" value="http://${node0.url}:8080/invoker/JNDIFactory" />
   <property name="node0.jgroups.bind_addr" value="${node0}" />
   <!-- Cluster node1 defaults -->
   <property name="node1" value="${hostname}" />
   <!-- node1.url is a hostname or IP literal suitable for embedding in URLs -->
   <condition property="node1.url" value="[${node1}]" else="${node1}">
   	 <contains string="${node1}" substring=":"/>
   </condition>	
   <property name="node1.http.url" value="http://${node1.url}:8080" />
   <property name="node1.jndi.url" value="jnp://${node1.url}:1099" />
   <property name="node1.hajndi.url" value="jnp://${node1.url}:1100" />
   <property name="node1.jndi.http.url" value="http://${node1.url}:8080/invoker/JNDIFactory" />
   <property name="node1.jgroups.bind_addr" value="${node1}" />
   <echo message="Using node0=${node0},node0.http.url=${node0.http.url},node0.jndi.url=${node0.jndi.url}"/> 
   <echo message="Using node1=${node1},node1.http.url=${node1.http.url},node1.jndi.url=${node1.jndi.url}"/> 

   <!-- UDP Group -->
   <!-- The value of the -u option passed to jboss -->
   <!-- A blank value will prevent the -u option from being passed -->
   <!-- Override this in the local.properties or pass to Ant as -DupdGroup=128.x.x.x -->
   <property name="udpGroup" value=""/>
   <!-- Same thing, but passed to the client -->
   <property name="jbosstest.udpGroup" value="${udpGroup}"/>
  
   <!-- PartitionName -->
   <!-- The value of the -g option passed to jboss in some configs -->
   <!-- Override this in the local.properties or pass to Ant as -DpartitionName=FooPartition -->
   <property name="partitionName" value="DefaultPartition"/>
   <!-- Same thing, but passed to the client -->
   <property name="jbosstest.partitionName" value="${partitionName}"/>

   <!-- IP stack preference -->
   <!-- The value of java.net.preferIPv4Stack determines which IP version to test against. -->
   <!-- Setting the system property to true, or not setting at all, forces use of IPv4 IP stack in the JVM. -->
   <!-- Setting the system property to false forces use of IPv6 stack -->
   <!-- This ant property is used in server-config.xml when starting all server configurations --> 
   <!-- It is also used on the client side targets to make sure that client and server are using the same stack -->
   <condition property="java.net.preferIPv4Stack" value="true" else="false">
 	<or>
 	  <not>
 	    <isset property="java.net.preferIPv4Stack"/>
 	  </not>
 	  <and>
 	    <isset property="java.net.preferIPv4Stack"/>
 	    <istrue value="${java.net.preferIPv4Stack}"/>
 	  </and>
 	</or>
   </condition>
   <!-- IP address preference -->
   <!-- The value of java.net.preferIPv6Addresses determines which version of an IP address to return -->
   <!-- when a single hostname maps to both an IPv4 and an IPv6 address -->  
   <!-- Setting the system property to true indicates a preference for IPv6 addresses. -->
   <condition property="java.net.preferIPv6Addresses" value="true" else="false">
	<or>
	 <not>
	   <isset property="java.net.preferIPv6Addresses"/>
	 </not>
	 <and>
	   <isset property="java.net.preferIPv6Addresses"/>
	   <istrue value="${java.net.preferIPv6Addresses}"/>
	 </and>
	</or>
   </condition>
   <echo message="Using java.net.preferIPv4Stack=${java.net.preferIPv4Stack},java.net.preferIPv6Addresses=${java.net.preferIPv6Addresses}"/> 
	
	<!-- this autodiscovery mcast address is used by NamingRestartUnitTestCase and must vary depending on IP stack -->
	<!-- JBAS-8540 -->
	<condition property="jbosstest.naming.autodiscovery.mcast_addr" value="230.9.9.9" else="ff0e::9:9:9">
	  <or>
	    <!-- IPv4 stack -->
		<istrue value="${java.net.preferIPv4Stack}"/>	
	    <!-- IPv6 stack with IPv4 addresses -->
	    <and>
		 <isfalse value="${java.net.preferIPv4Stack}"/>
		 <isfalse value="${java.net.preferIPv6Addresses}"/>
	    </and>	
	  </or>		
	</condition>	
	
	<!-- this mcast address is used by JChannelFactoryClassLoaderLeakTestCase and must vary depending on IP stack -->
	<!-- JBAS-8540 -->
	<condition property="jbosstest.jgroups.mcast_addr" value="230.111.111.111" else="ff0e::111:111:111">
	 <or>
	  <!-- IPv4 stack -->
	  <istrue value="${java.net.preferIPv4Stack}"/>	
	  <!-- IPv6 stack with IPv4 addresses -->
	  <and>
	   <isfalse value="${java.net.preferIPv4Stack}"/>
	   <isfalse value="${java.net.preferIPv6Addresses}"/>
	  </and>	
     </or>		
    </condition>	
	
   <!-- =================== -->
   <!-- Basic Configuration -->
   <!-- =================== -->

   <!-- Module name(s) & version -->
   <property name="module.name" value="testsuite"/>
   <property name="module.Name" value="JBoss Testsuite"/>
   <property name="module.version" value="DEV"/>

  <target name="init-paths" depends="init-dependencies" unless="init-paths.target.complete"
    description="initialize the classpath refs">
    
    <path id="org.jboss.aop.classpath">
      <fileset refid="org.jboss.aop:jboss-aop:jar"/>
      <fileset refid="org.jboss.aop:jboss-aop:jar:client"/>
      <fileset refid="org.jboss.aop:jboss-aop-asintegration-core:jar"/>
      <fileset refid="org.jboss.aop:jboss-aop-asintegration-jmx:jar"/>
      <fileset refid="org.jboss.aop:jboss-aop-asintegration-mc:jar"/>
      <fileset refid="org.jboss.aop:jboss-aop-aspects:jar"/>
      <fileset refid="org.jboss.aop:jboss-aop-deployers:jar"/>
      <fileset refid="org.jboss.aop:pluggable-instrumentor:jar"/>
      <fileset refid="org.jboss.classpool:jboss-classpool:jar"/>
      <fileset refid="org.jboss.classpool:jboss-classpool-scoped:jar"/>
    </path>
    <path id="org.springframework.classpath">
      <fileset refid="org.springframework:spring-aop:jar"/>
      <fileset refid="org.springframework:spring-asm:jar"/>
      <fileset refid="org.springframework:spring-beans:jar"/>
      <fileset refid="org.springframework:spring-context:jar"/>
      <fileset refid="org.springframework:spring-core:jar"/>
      <fileset refid="org.springframework:spring-expression:jar"/>
      <fileset refid="org.springframework:spring-web:jar"/>
      <fileset refid="org.springframework:spring-webmvc:jar"/>
    </path>
    <path id="org.jboss.jbossas.tomcat.classpath">
      <fileset refid="org.jboss.jbossas:jboss-as-tomcat:jar:jboss-web-deployer"/>
      <fileset refid="org.jboss.jbossas:jboss-as-tomcat:jar:jboss-web-service"/>
      <pathelement path="${project.root}/tomcat/target/jbossweb-cluster.aop"/>
      <pathelement path="${project.root}/tomcat/target/resources"/>
    </path>
    <path id="org.jboss.jbossas.cluster.resources">
      <pathelement path="${project.root}/cluster/target/resources"/>
    </path>
    
    <!-- The combined library classpath -->
    <path id="library.classpath">
      <fileset refid="apache-jaxme:jaxmexs:jar"/>
      <fileset refid="org.apache.ws.scout:scout:jar"/>
      <fileset refid="xml-resolver:xml-resolver:jar"/>
      <fileset refid="xerces:xercesImpl:jar"/>
      <fileset refid="xml-apis:xml-apis:jar"/>
      <fileset refid="org.apache:xmlsec:jar"/>
      <fileset refid="dom4j:dom4j:jar"/>
      <fileset refid="httpunit:httpunit:jar"/>
      <fileset refid="rhino:js:jar"/>
      <fileset refid="wsdl4j:wsdl4j:jar"/>
      <fileset refid="jacorb:idl:jar"/>
      <fileset refid="jacorb:idl_g:jar"/>
      <fileset refid="jacorb:jacorb:jar"/>
      <fileset refid="jacorb:jacorb_g:jar"/>
<!--  
          <fileset refid="org.jboss.cache:jbosscache-core:jar"/>  
          <fileset refid="org.jboss.cache:jbosscache-pojo:jar"/>
-->
      <fileset refid="org.jgroups:jgroups:jar"/>
      <fileset refid="org.easymock:easymock:jar"/>
      <fileset refid="javassist:javassist:jar"/>
      <fileset refid="juddi:juddi:jar"/>
      <fileset refid="nekohtml:nekohtml:jar"/>
      <fileset refid="opensaml:opensaml:jar"/>
      <fileset refid="oswego-concurrent:concurrent:jar"/>
      <fileset refid="sleepycat:je:jar"/>
      <fileset refid="com.sun.xml.bind:jaxb-impl:jar"/>
      <fileset refid="com.sun.xml.bind:jaxb-xjc:jar"/>
      <fileset refid="org.jboss.web:jasper-jdt:jar"/>
      <fileset refid="org.jboss.web:jbossweb:jar"/>
      <fileset refid="trove:trove:jar"/>
      <fileset refid="wutka-dtdparser:dtdparser:jar"/>
      <fileset refid="org.codehaus.woodstox:wstx-lgpl:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-client:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-server-api:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-server-core:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-server-ispn:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-server-cache-ispn:jar"/>
      <fileset refid="org.jboss.cluster:jboss-ha-server-cache-spi:jar"/>
      <fileset refid="org.infinispan:infinispan-core:jar"/>
      <fileset refid="org.infinispan:infinispan-tree:jar"/>
      <fileset refid="org.rhq.helpers:rhq-pluginAnnotations:jar"/>
      <fileset refid="org.jboss.jaxr:juddi-saaj:jar"/>
      <fileset refid="org.jboss.jaxr:juddi-service:sar"/>
      <fileset refid="org.jboss.remoting:jboss-remoting:jar"/>
      <fileset refid="jboss:jboss-serialization:jar"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-core:jar"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-core:jar:client"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-ext-api:jar"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-proxy-impl:jar"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-proxy-impl:jar:client"/>
      <fileset refid="org.jboss.ejb3:jboss-ejb3-proxy-spi:jar:client"/>
      <fileset refid="org.jboss.ejb3.vfs:jboss-ejb3-vfs-spi:jar"/>
      <fileset refid="org.hibernate:hibernate-core:jar"/>
      <fileset refid="org.hibernate:hibernate-entitymanager:jar"/>
      <fileset refid="org.hibernate:hibernate-infinispan:jar"/>
      <fileset refid="org.hibernate:hibernate-testing:jar"/>
      <fileset refid="org.jboss.ws:jbossws-common:jar"/>
      <fileset refid="org.jboss.ws:jbossws-framework:jar"/>
      <fileset refid="org.jboss.ws:jbossws-spi:jar"/>
      <fileset refid="org.jboss.ws.cxf:jbossws-cxf-client:jar"/>
      <fileset refid="org.jboss.ws.cxf:jbossws-cxf-factories:jar"/>
      <fileset refid="org.jboss.ws.native:jbossws-native-core:jar"/>
      <fileset refid="org.jboss:jbossxb:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-common:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-client:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-ear:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-ejb:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-rar:jar"/>
      <fileset refid="org.jboss.metadata:jboss-metadata-war:jar"/>
      <fileset refid="org.jboss.integration:jboss-classloading-spi:jar"/>
      <fileset refid="org.jboss.integration:jboss-corba-ots-spi:jar"/>
      <fileset refid="org.jboss.integration:jboss-deployment-spi:jar"/>
      <fileset refid="org.jboss.integration:jboss-integration:jar"/>
      <fileset refid="org.jboss.integration:jboss-transaction-spi:jar"/>
      <fileset refid="org.jboss.profileservice:jboss-profileservice-spi:jar"/>
      <fileset refid="org.jboss.profileservice:jboss-profileservice-persistence:jar"/>
      <fileset refid="org.jboss.service.binding:jboss-service-binding-core:jar"/>
      <fileset refid="org.jboss.service.binding:jboss-service-binding-mgmt:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-hornetq-int:jar"/>
      <fileset refid="org.hornetq:hornetq-core-client:jar"/>
      <fileset refid="org.hornetq:hornetq-jms-client:jar"/>
      <fileset refid="org.jboss.netty:netty:jar"/>
      <!-- needed for proxy tests -->
      <fileset refid="bcel:bcel:jar"/>
      <!-- needed for security login module tests -->
      <fileset refid="hsqldb:hsqldb:jar"/>
      <!-- Need hibernate jar for hibernate-based tests -->
      <fileset refid="org.hibernate:hibernate-core:jar"/>
      <fileset refid="odmg:odmg:jar"/>
      <fileset refid="cglib:cglib:jar"/>
      <!-- Need spring jar for spring-based tests -->
      <path refid="org.springframework.classpath"/>
      <fileset refid="org.jboss.snowdrop:snowdrop-deployers:jar"/>
      <fileset refid="org.jboss.snowdrop:snowdrop-facade:jar"/>

      <!-- xml binding -->
      <fileset refid="xmlunit:xmlunit:jar"/>
      <fileset refid="org.jboss:jboss-reflect:jar"/>
      <fileset refid="org.jboss:jboss-mdr:jar"/>
      <fileset refid="org.jboss.man:jboss-managed:jar"/>
      <fileset refid="org.jboss.man:jboss-metatype:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-client:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-client-spi:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-core:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-core-spi:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-impl:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-jmx:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-spi:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-structure-spi:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-vfs-spi:jar"/>
      <fileset refid="org.jboss.deployers:jboss-deployers-vfs:jar"/>
      <fileset refid="org.jboss.cl:jboss-classloader:jar"/>
      <fileset refid="org.jboss.cl:jboss-classloading:jar"/>
      <fileset refid="org.jboss.cl:jboss-classloading-vfs:jar"/>

   	  <!-- For classloader leak tests -->
      <fileset refid="jboss.profiler.jvmti:jboss-profiler-jvmti:jar"/>
			
      <!-- org.jboss.aspects:jboss-aspects -->
      <fileset refid="org.jboss.aspects:jboss-current-invocation-aspects:jar"/>
      <fileset refid="org.jboss.aspects:jboss-remoting-aspects:jar"/>
      <fileset refid="org.jboss.aspects:jboss-security-aspects:jar"/>
      <fileset refid="org.jboss.aspects:jboss-transaction-aspects:jar"/>
      
        <!-- JBAS-6934  -->
      <fileset refid="net.jcip:jcip-annotations:jar"/>

      <!-- needed for jbossts crash recovery tests -->
      <fileset refid="org.jboss.jbossas:jboss-server-manager:jar"/>
      <fileset refid="org.jboss.jbossts:jbossjts:jar"/>
      <fileset refid="org.jboss.jbossts:jbossjts-integration:jar"/>
        
		<!-- Switchboard and jboss-injection -->
        <fileset refid="org.jboss.injection:jboss-injection-injector:jar"/>        
        <fileset refid="org.jboss.injection:jboss-injection-mc-impl:jar"/>
        <fileset refid="org.jboss.injection:jboss-injection-manager:jar"/>
		        

      <!-- Java EE APIs -->
      <path refid="jboss.javaee.api.classpath"/>
    </path>

    <!-- ======= -->
    <!-- InternalServer -->
    <!-- This could be a mistake.  Perhaps, though, it would be a good idea to separate
    tests that need internal jboss classes from those that don't.  When I put it in, only
    the jca XATxConnectionManagerUnitTestCase needed an internal class (the tx manager)-->
    <property name="jboss.internal-server.root" value="${project.root}/server/output"/>
    <property name="jboss.internal-server.lib" value="${jboss.internal-server.root}/lib"/>
    <path id="jboss.internal-server.classpath">
      <pathelement path="${jboss.dist}/common/lib/jboss.jar"/>
      <pathelement path="${jboss.dist}/lib/jboss-main.jar"/>
      <pathelement path="${jboss.dist}/lib/jboss-system.jar"/>
    </path>

    <!-- JBoss Java EE APIs classpath -->
    <path id="jboss.javaee.api.classpath">
      <fileset refid="org.jboss.spec.javax.annotation:jboss-annotations-api_1.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.el:jboss-el-api_2.2_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.enterprise.deploy:jboss-jad-api_1.2_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.jms:jboss-jms-api_1.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.resource:jboss-connector-api_1.5_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.security.jacc:jboss-jacc-api_1.4_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.security.auth.message:jboss-jaspi-api_1.0_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.servlet.jsp:jboss-jsp-api_2.2_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.xml.bind:jboss-jaxb-api_2.2_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.xml.rpc:jboss-jaxrpc-api_1.1_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.xml.soap:jboss-saaj-api_1.3_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.xml.ws:jboss-jaxws-api_2.2_spec:jar"/>
      <fileset refid="org.jboss.spec.javax.xml.registry:jboss-jaxr-api_1.0_spec:jar"/>
      <fileset refid="org.hibernate.javax.persistence:hibernate-jpa-2.0-api:jar"/>
      <fileset refid="javax.enterprise:cdi-api:jar"/>
      <fileset refid="javax.inject:javax.inject:jar"/>
      <fileset refid="javax.activation:activation:jar"/>
      <fileset refid="javax.mail:mail:jar"/>
      <fileset refid="stax:stax-api:jar"/>
      <fileset refid="com.sun.faces:jsf-api:jar"/>
      <fileset refid="javax.validation:validation-api:jar"/>
    </path>

    <!-- The combined dependant module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="org.jboss.aop.classpath"/>
      <fileset refid="org.jboss.jbossas:jboss-as-aspects:jar:jboss-aspect-library"/>
      <fileset refid="org.jboss.jbossas:jboss-as-cluster:jar"/>
      <path refid="org.jboss.jbossas.cluster.resources"/>
      <fileset refid="org.jboss:jboss-common-core:jar"/>
      <fileset refid="org.jboss.logging:jboss-logging:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-deployment:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-deployment:jar:jboss-jsr88"/>
      <fileset refid="org.jboss.jbossas:jboss-as-hibernate-int:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-iiop:jar"/>
      <path refid="jboss.internal-server.classpath"/>
      <fileset refid="org.jboss.jbossas:jboss-as-management:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-management:jar:jsr77"/>
      <fileset refid="org.jboss.jbossas:jboss-as-management:jar:jsr77-client"/>
      <fileset refid="org.jboss.naming:jnpserver:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-profileservice:jar"/>
      <fileset refid="org.picketbox:jboss-security-spi:jar"/>
      <fileset refid="org.picketbox:jbosssx:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-security:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-server:jar:jboss"/>
      <fileset refid="org.jboss.jbossas:jboss-as-main:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-api:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-api-as:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-api-mc:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-impl-base:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-impl-as:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-impl-mc:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-spi:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-spi-as:jar"/>
      <fileset refid="org.jboss.bootstrap:jboss-bootstrap-spi-mc:jar"/>
     <fileset refid="org.jboss.shrinkwrap:shrinkwrap-api:jar"/>
      <fileset refid="org.jboss.shrinkwrap:shrinkwrap-spi:jar"/>
      <fileset refid="org.jboss.shrinkwrap:shrinkwrap-impl-base:jar"/>
      <path refid="org.jboss.jbossas.tomcat.classpath"/>
      <fileset refid="org.jboss.jbossas:jboss-as-varia:jar"/>
      <fileset refid="org.jboss.web:jasper-jdt:jar"/>
      <fileset refid="org.jboss.web:jbossweb:jar"/>
    </path>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <path id="javac.classpath">
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- Classpath to build and run the tests -->
    <path id="tests.compile.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <pathelement path="${project.tools}/ant/lib/ant.jar"/>
      <pathelement path="${project.tools}/ant/lib/ant-junit.jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-ejb3:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-ejb3:jar:client"/>
      <fileset refid="org.jboss.shrinkwrap:shrinkwrap-api:jar"/>
      <fileset refid="org.jboss.test:jboss-test:jar"/>
      <path refid="org.jboss.jbossas.tomcat.classpath"/>
      <path refid="tests.classpath"/>
    </path>

    <!-- Classpath to build and run the tests -->
    <path id="smoketests.classpath">
      <fileset dir="${jboss.dist}/client">
        <include name="**/*.jar"/>
        <exclude name="jaxws-rt.jar"/>
        <exclude name="jaxws-tools.jar"/>
        <exclude name="cxf-rt*.jar"/>
        <exclude name="cxf-tools*.jar"/>
      </fileset>
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <pathelement path="${project.tools}/ant/lib/ant.jar"/>
      <pathelement path="${project.tools}/ant/lib/ant-junit.jar"/>
      <fileset refid="junit:junit:jar"/>
      <fileset refid="log4j:log4j:jar"/>
      <fileset refid="org.jboss.stdio:jboss-stdio:jar"/>
      <fileset refid="commons-collections:commons-collections:jar"/>
      <fileset refid="commons-logging:commons-logging:jar"/>
      <fileset refid="apache-discovery:commons-discovery:jar"/>
      <fileset refid="commons-fileupload:commons-fileupload:jar"/>
      <fileset refid="commons-lang:commons-lang:jar"/>
      <fileset refid="commons-codec:commons-codec:jar"/>   
      <fileset refid="commons-httpclient:commons-httpclient:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-ejb3:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-ejb3:jar:client"/>
      <fileset refid="org.jboss.test:jboss-test:jar"/>
      <fileset refid="org.jboss.mx:jboss-j2se:jar"/>
      <fileset refid="org.jboss.mx:jboss-jmx:jar"/>
      <fileset refid="org.jboss.mx:jboss-jmx-annotations:jar"/>
      <fileset refid="org.jboss.mx:jboss-mbeans:jar"/>
      <fileset refid="org.jboss.mx:jboss-mbeanserver:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-system:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-system-jmx:jar"/>
      <fileset refid="org.jboss:jboss-vfs:jar"/>
      <fileset refid="org.jboss.jbossas:jboss-as-connector:jar:jboss-jca"/>
      <fileset refid="org.jboss.jbossas:jboss-as-connector:jar:jboss-jca-deployer"/>
      <fileset refid="org.jboss.jbossas:jboss-as-connector:jar:jboss-local-jdbc"/>
      <fileset refid="org.jboss.jbossas:jboss-as-connector:jar:jboss-common-jdbc-wrapper"/>
      <fileset refid="objectweb-joramtests:joramtests:jar"/>
      <fileset refid="org.jboss.kernel:jboss-jmx-mc-int:jar"/>
      <fileset refid="org.jboss.kernel:jboss-aop-mc-int:jar"/>
      <fileset refid="org.jboss.kernel:jboss-dependency:jar"/>
      <fileset refid="org.jboss.kernel:jboss-kernel:jar"/>
    </path>

<!-- Classpath to build and run the tests -->
  <path id="tests.classpath">
      <path refid="smoketests.classpath"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="tests.compile.classpath"/>
    </path>

    <property name="init-paths.target.complete" value="true"/>
  </target>
  
   <!-- RMI Stub generation -->
   <patternset id="rmic.includes"
      description="The patternset passed to the compile-stubs target">
      <include name="org/jboss/test/cluster/test/DistributedStateTestCase$TestListener.class"/>
      <include name="org/jboss/test/cluster/test/DRMTestCase$TestListener.class"/>
      <include name="org/jboss/test/cts/test/ClientCallbackImpl.class"/>
      <include name="org/jboss/test/jmx/invoker/RMIBadListener.class"/>
      <include name="org/jboss/test/jmx/invoker/RMIListener.class"/>
   </patternset>

   <!-- ===== -->
   <!-- Tasks -->
   <!-- ===== -->

   <!-- Where source files live -->
   <property name="source.java" value="${module.source}/main"/>
	 <property name="source.java.5" value="${module.source}/jdk15"/>
   <property name="source.etc" value="${module.source}/etc"/>
   <property name="source.docs" value="${module.source}/docs"/>
   <property name="source.resources" value="${module.source}/resources"/>
   <property name="source.stylesheets" value="${module.source}/stylesheets"/>

   <!-- Where build generated files will go -->
   <property name="build.classes" value="${module.output}/classes"/>
   <property name="build.lib" value="${module.output}/lib"/>
   <property name="build.api" value="${module.output}/api"/>
   <property name="build.etc" value="${module.output}/etc"/>
   <property name="build.docs" value="${module.output}/docs"/>
   <property name="build.resources" value="${module.output}/resources"/>
   <property name="build.stylesheets" value="${module.output}/stylesheets"/>
   <property name="build.reports" value="${module.output}/reports"/>
   <!--<property name="build.testlog" value="${java.io.tmpdir}"/>-->
   <property name="build.testlog" value="${module.output}/log"/>
   <property name="build.gen-src" value="${module.output}/gen-src/"/>

   <!-- Install/Release structure -->
   <property name="install.id" value="${module.name}-${module.version}"/>
   <property name="release.id" value="${install.id}"/>
   <property name="install.root" value="${module.output}/${install.id}"/>
   <property name="generic.config" value="${server}"/>

   <!-- Import the jboss server run targets -->
   <import file="imports/server-config.xml"/>

   <!-- Packages to include when generating api documentation -->
   <property name="javadoc.packages" value="org.jboss.*"/>

   <!-- Override JUnit defaults -->
   <property name="junit.timeout" value="180000"/> <!-- 3 minutes -->
   <property name="jbosstest.iterationcount" value="10"/>
   <property name="jbosstest.threadcount" value="5"/>
   <property name="jbosstest.beancount" value="5"/>
   <property name="jbosstest.nodeploy" value="false"/>
   <property name="jbosstest.src.etc" value="${source.etc}"/>
   <property name="junit.batchtest.todir" value="${build.reports}"/>
   <property name="junit.jvm.options" value="-Ddummy"/>
   <!-- Override JUnit Marathon defaults -->
   <property name="marathon.timeout" value="3900000"/> <!-- 65 minutes -->
   <property name="marathon.duration" value="3600000"/> <!-- 60 minutes -->
   <property name="marathon.threadcount" value="100"/>
   <propertyset id="jbosstest-props">
      <propertyref prefix="jbosstest."/>
   </propertyset>

  <target name="init-maven-ant-tasks" unless="init-maven-ant-tasks.target.complete">
    <path id="maven-ant-tasks.classpath" path="../tools/maven/ant-tasks/maven-ant-tasks-2.1.0.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />

    <property name="init-maven-ant-tasks.target.complete" value="true"/>
  </target>
               
  <target name="init-dependencies" depends="init-maven-ant-tasks" unless="init-dependencies.target.complete">
    <!-- ================================================================== -->
    <!-- Init the maven ant tasks -->
    <!-- ================================================================== -->

    <!-- Set a default file to use to define the thirdparty dependencies. -->
    <property name="thirdparty.pom.file" location="pom.xml"/>
    
    <property name="maven.repo.local" location="${user.home}/.m2/repository"/>

    <!-- 
      -  Initialize properties for each dependency in the thirdparty pom 
      -  The properties take the form "groupId:artifactId:packaging"
      -->
    <maven:dependencies filesetId="pom.dependencies"
                        versionsId="pom.dependencies.versions"
                        scopes="compile, runtime, test"
                        cacheDependencyRefs="true"
                        dependencyRefsBuildFile="output/build-dependencies.xml">
      <pom file="${thirdparty.pom.file}"/>
      <localRepository path="${maven.repo.local}"/>
    </maven:dependencies>

    <mapper id="remove-versions" classpathref="maven-ant-tasks.classpath"
              classname="org.apache.maven.artifact.ant.VersionMapper"
              from="${pom.dependencies.versions}" to="flatten" />

    <property name="init-dependencies.target.complete" value="true"/>
  </target>
    
   <target name="init" depends="check-env, init-paths, server-config" unless="init.target.complete">
      <record name="${basedir}/build.log" append="yes" action="start" loglevel="error"/>
      <mkdir dir="${build.gen-src}/org/jboss/test/cts/ejb"/>
      <mkdir dir="${build.gen-src}/org/jboss/test/cts/interfaces"/>
      <mkdir dir="${build.gen-src}/org/jboss/test/cts/service"/>
      <copy
         tofile="${build.gen-src}/org/jboss/test/cts/interfaces/CtsCmp2Local.java"
         file="${source.java}/org/jboss/test/cts/interfaces/CtsCmp2Local_V1.txt"
         overwrite="false"/>
      <copy tofile="${build.gen-src}/org/jboss/test/cts/ejb/CtsCmp2Bean.java"
         file="${source.java}/org/jboss/test/cts/ejb/CtsCmp2Bean_V1.txt"
         overwrite="flase"/>
      <copy
         tofile="${build.gen-src}/org/jboss/test/cts/service/CtsCmpService.java"
         file="${source.java}/org/jboss/test/cts/service/CtsCmpService_V1.txt"
         overwrite="false"/>
      <mkdir dir="${build.gen-src}/org/jboss/test/classloader/scoping/singleton"/>
      <copy tofile="${build.gen-src}/org/jboss/test/classloader/scoping/singleton/MySingleton.java"
            file="${source.java}/org/jboss/test/classloader/scoping/singleton/MySingleton_V1.txt" overwrite="false"/>
     
     <property name="init.target.complete" value="true"/>
   </target>

   <!-- check if thirdparty libraries are to be downloaded -->
   <target name="check.inhibit.downloads">
      <condition property="inhibit.downloads">
         <or>
            <uptodate property="dependencies.current"
	          srcfile="../pom.xml"
               targetfile="../thirdparty/testsuite-libraries.ent"/>
            <istrue value="${nodownload}"/>
         </or>
      </condition>
  </target>

  <!-- check if the the user has specied proxy settings -->
  <target name="check.proxy">
    <condition property="hasproxy">
        <and>
            <isset property="proxy.host"/>
            <isset property="proxy.port"/>
            <not>
                <equals arg1="" arg2="${proxy.host}" trim="true"/>
            </not>
            <not>
                <equals arg1="" arg2="${proxy.port}" trim="true"/>
            </not>
        </and>
    </condition>
  </target>

  <!-- set proxy settings -->
  <target name="set.proxy" if="hasproxy" depends="check.proxy">
    <echo>Proxy is set to ${proxy.host}:${proxy.port}</echo>
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
  </target>

   <!-- ================================================================== -->
   <!-- Compile                                                            -->
   <!-- ================================================================== -->
   <import file="imports/code-generation.xml"/>

   <!--
      |  Compile everything.
      |
      |  This target should depend on other compile-* targets for each
      |  different type of compile that needs to be performed, short of
      |  documentation compiles.
     -->
   <target name="compile"
      depends="init, compile-classes, compile-xmbean-dds, compile-stubs, compile-etc, compile-stylesheets, compile-resources"
      description="Compile all source files."/>

   <!-- Compile all class files -->
   <target name="compile-classes" depends="compile-bean-sources, compile-mbean-sources, compile-proxycompiler-bean-sources, compile-classes-only">
   </target>

   <target name="compile-annotated-classes-50" if="HAVE_JDK_1.5">
     <mkdir dir="${build.classes}"/>

     <javac destdir="${build.classes}"
       optimize="${javac.optimize}"
       source="1.5"
       target="1.5"
       debug="${javac.debug}"
       depend="${javac.depend}"
       verbose="${javac.verbose}"
       deprecation="${javac.deprecation}"
       includeAntRuntime="${javac.include.ant.runtime}"
       includeJavaRuntime="${javac.include.java.runtime}"
       failonerror="${javac.fail.onerror}">
       <src path="${source.java.5}"/>
       <classpath refid="tests.compile.classpath"/>
       <include name="org/jboss/test/aop/**"/>
     </javac>

      <!-- The aop tests use JDK 5 annotations, so make sure that the jboss-aop-jdk50.jar comes before the JDK1.4 style annotations defined in jboss-messaging-client.jar  -->
      <path id="annotations.classpath">
         <path refid="org.jboss.aop.classpath"/>
         <path refid="tests.compile.classpath"/>
      </path>

     <javac destdir="${build.classes}"
       optimize="${javac.optimize}"
       source="1.5"
       target="1.5"
       debug="${javac.debug}"
       depend="${javac.depend}"
       verbose="${javac.verbose}"
       deprecation="${javac.deprecation}"
       includeAntRuntime="${javac.include.ant.runtime}"
       includeJavaRuntime="${javac.include.java.runtime}"
       failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <classpath refid="annotations.classpath"/>
       <include name="org/jboss/test/aop/**"/>
     </javac>

   </target>

   <target name="compile-classes-only" depends="compile-annotated-classes-50">
      <mkdir dir="${build.classes}"/>
      <javac destdir="${build.classes}"
         listfiles="yes"
         optimize="${javac.optimize}"
         source="${javac.source}"
         target="${javac.target}"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeAntRuntime="${javac.include.ant.runtime}"
         includeJavaRuntime="${javac.include.java.runtime}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.java}"/>
         <src path="${build.gen-src}"/>
         <exclude name="org/jboss/test/recover/oracle/**"/>
         <exclude name="org/jboss/test/recover/derby/**"/>
         <exclude name="org/jboss/test/xml/JaxpXPathBaseTestCase*" if="HAVE_JDK_1.4"/>
         <exclude name="org/jboss/test/aop/**"/>
         <classpath refid="tests.compile.classpath"/>
      </javac>
   </target>

   <target name="compile-stubs">
      <rmic base="${build.classes}"
         sourcebase="${build.classes}"
         verify="${rmic.verify}"
         iiop="${rmic.iiop}"
         iiopopts="${rmic.iiopopts}"
         idl="${rmic.idl}"
         idlopts="${rmic.idlops}"
         debug="${rmic.debug}"
         stubVersion="${rmic.stubVersion}"
         >
         <classpath refid="tests.compile.classpath"/>
         <patternset refid="rmic.includes" />
      </rmic>
   </target>

   <!-- Compile resource files -->
   <target name="compile-resources">
      <mkdir dir="${build.resources}"/>
      <copy todir="${build.resources}" filtering="no">
         <fileset dir="${source.resources}">
            <exclude name="webservice/**"/>
            <exclude name="ws/**"/>
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <!-- Compile stylesheets files -->
   <target name="compile-stylesheets">
      <mkdir dir="${build.stylesheets}"/>
      <copy todir="${build.stylesheets}" filtering="yes">
         <fileset dir="${source.stylesheets}">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <!-- Compile etc files (manifests and such) -->
   <target name="compile-etc">
      <mkdir dir="${build.etc}"/>
      <copy todir="${build.etc}" filtering="yes">
         <fileset dir="${source.etc}">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>


   <!-- Import the test jars build targets -->
   <import file="imports/test-jars.xml"/>

   <!-- Propagate the dist directory as a jbosstest system property -->
   <property name="jbosstest.dist" value="${jboss.dist}"/>

  <!-- ================================================================== -->
  <!-- Cleaning                                             -->
  <!-- ================================================================== -->
  
  <target name="clean" description="Cleans up most generated files.">
    
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${module.output}">
        <exclude name="eclipse-classes/**"/>
      </fileset>
    </delete>

  </target>

  <!-- Clean up all build output -->
  <target name="clobber" description="Cleans up all generated files.">
    
    <delete dir="${module.output}"/>

    <!-- Try to stop the build log before we delete the file. -->
    <record name="${module.root}/build.log" action="stop"/>

    <!-- 
       | This file may be opened still due and fail to be removed on win32
       | systems, so lets just ignore those errors for now.
     -->
    <delete file="${module.root}/build.log" quiet="true" failonerror="false"/>

  </target>

   <!-- ================================================================== -->
   <!-- Misc.                                                              -->
   <!-- ================================================================== -->

   <target name="main"
      description="Executes the default target (most)."
      depends="most"/>

   <target name="all"
      description="Builds everything."
      depends="jars"/>

   <target name="most"
      description="Builds almost everything."
      depends="jars"/>

   <target name="help" description="Displays the project help">
      <echo>
         The main targets are:
         + jars : compile the tests and build the test jars
         + tests : the main tests entry points which runs all normal unit tests
         Use ant -projecthelp to list all documented targets.
      </echo>
   </target>

   <!-- ================================================================== -->
   <!-- Tests                                                              -->
   <!-- ================================================================== -->

   <macrodef name="wait-on-host">
      <attribute name="seconds" default="120"/>
      <attribute name="host" default="${node0}"/>
      <attribute name="hostforurl" default="${node0.url}"/>
      <sequential>
         <echo message="Waiting for @{host} to start..."/>
         <waitfor maxwait="@{seconds}" maxwaitunit="second"
            checkevery="5" checkeveryunit="second" timeoutproperty="startup.timeout">
            <http url="http://@{hostforurl}:8080/"/>
         </waitfor>
         <fail message="Timeout waiting for nodes to start" if="startup.timeout"/>
      </sequential>
   </macrodef>

   <macrodef name="wait-on-shutdown">
      <attribute name="seconds" default="60"/>
      <attribute name="conf"/>
      <sequential>
         <echo message="Waiting for '@{conf}' server to stop..."/>
         <waitfor maxwait="@{seconds}" maxwaitunit="second"
            checkevery="5" checkeveryunit="second" timeoutproperty="shutdown.timeout">
            <available file="server.log">
               <filepath>
                  <fileset dir="${jboss.dist}/server/@{conf}/log/" includes="server.log">
                     <contains text="[org.jboss.bootstrap.microcontainer.ServerImpl] (JBoss Shutdown Hook) Shutdown complete"/>
                  </fileset>
               </filepath>
            </available>
         </waitfor>
         <fail message="Timeout waiting for '@{conf}' server to shutdown." if="shutdown.timeout"/>
      </sequential>
   </macrodef>

   <!-- patternsets for specialized configs -->
   
   <!-- Make the "test" system property a patternset -->
   <patternset id="one.test.includes">
      <include name="${test}"/>
   </patternset>
   <patternset id="binding-manager.includes">
     <include name="org/jboss/test/binding/*TestCase.class"/>
   </patternset>
   <patternset id="binding-manager.excludes">
     <exclude name="org/jboss/test/binding/*TestCase.class"/>
   </patternset>
   <!-- The compatibility tests need extra memory -->
   <patternset id="compatibility.includes">
     <include name="org/jboss/test/compatibility/test/*TestCase.class"/>
   </patternset>
   <patternset id="compatibility.excludes">
     <exclude name="org/jboss/test/compatibility/test/*TestCase.class"/>
   </patternset>
   <!-- Tests needing deployment service setup -->
   <patternset id="deployment-service.includes">
      <include name="org/jboss/test/deployment/test/*TestCase.class"/>
   </patternset>
   <patternset id="deployment-service.excludes">
      <exclude name="org/jboss/test/deployment/test/*TestCase.class"/>
   </patternset>
  <!-- Tests needing IIOP setup -->
  <patternset id="iiop.includes">
     <include name="org/jboss/test/*iiop/test/*TestCase.class"/>
     <exclude name="org/jboss/test/txiiop/test/*TestCase.class"/>
  </patternset>
  <patternset id="iiop.excludes">
     <exclude name="org/jboss/test/*iiop/test/*"/>
  </patternset>
   <!-- A patternset that requires jboss to run with a JACC security manager -->
   <patternset id="jacc.includes">
      <include name="**/test/jacc/test/*TestCase.class"/>
      <include name="org/jboss/test/web/test/UserInRoleUnitTestCase.class" />
      <include name="org/jboss/test/cmp2/audit/test/*TestCase.class" />
      <include name="org/jboss/test/cmp2/commerce/*TestCase.class" />
      <include name="org/jboss/test/cmp2/cmrstress/*TestCase.class" />
      <include name="org/jboss/test/cmp2/cmrtransaction/test/*TestCase.class" />
      <include name="org/jboss/test/cmp2/perf/test/*TestCase.class" />
      <include name="org/jboss/test/cmp2/relationship/*TestCase.class" />
      <include name="org/jboss/test/cmp2/simple/SimpleUnitTestCase.class" />
      <include name="**/test/webservice/jbws309/*TestCase.class"/>
   </patternset>
   <patternset id="jacc.excludes">
	<exclude name="**/test/jacc/test/*"/>
   </patternset>
   <patternset id="jacc.allstarrole.includes">
      <include name="org/jboss/test/jacc/test/allstarrole/*TestCase.class"/>
      <include name="org/jboss/test/jmx/test/SecureJMXInvokerUnitTestCase.class"/>
   </patternset>
   <patternset id="ldap.includes">
      <include name="**/test/security/test/opends/*TestCase.class"/>
   </patternset>
   <patternset id="jaxr.includes">
      <include name="org/jboss/test/jaxr/scout/**/*TestCase.class"/>
   </patternset>
   <!-- jbossmessaging includes -->
   <patternset id="jbossmessaging.includes">
    <include name="org/jboss/test/jbossmessaging/**/Jms11UnitTest.class"/>
     <include name="org/jboss/test/jbossmessaging/test/*UnitTestCase.class"/>
     <include name="org/jboss/test/jbossmessaging/perf/*StressTestCase.class"/>
     <include name="org/jboss/test/jbossmessaging/ra/*UnitTestCase.class"/>
     <include name="org/jboss/test/jms/integration/**/*Test.class"/>
   </patternset>
   <patternset id="jbossmessaging-clustering.includes">
     <include name="org/jboss/test/jbossmessaging/clustertest/*TestCase.class"/>
   </patternset>
   <!-- jbossmessaging excludes -->
   <patternset id="jbossmessaging.excludes">
     <exclude name="org/jboss/test/jbossmessaging/test/*UnitTestCase.class"/>
     <exclude name="org/jboss/test/jbossmessaging/perf/*StressTestCase.class"/>
     <exclude name="org/jboss/test/jbossmessaging/ra/*UnitTestCase.class"/>
     <exclude name="org/jboss/test/jms/integration/**/*Test.class"/>
   </patternset>
   <!-- Tests needing xml binding setup -->
   <patternset id="jbossxb.includes">
      <include name="org/jboss/test/xml/*TestCase.class"/>
   </patternset>
   <patternset id="jbossxb.excludes">
   </patternset>
   <!-- A patternset for that require a security config -->
   <patternset id="security.includes">
      <include name="**/test/naming/test/Security*"/>
      <include name="**/test/security/test/*UnitTestCase.class"/>
      <include name="**/test/security/test/auth/*UnitTestCase.class"/>
      <include name="**/test/security/test/authorization/*UnitTestCase.class"/>
      <include name="**/test/security/test/mapping/**/*TestCase.class"/>
      <include name="**/test/web/security/authorization/XACML*UnitTestCase.class"/>
      <include name="**/test/jca/test/SecurityContextUnitTestCase.class"/>
      <include name="**/test/jmx/test/SecureRMIAdaptorUnitTestCase.class"/>
      <include name="**/test/jmx/test/RMIAdaptorAuthorizationUnitTestCase.class"/>
      <include name="**/test/perf/test/SecurePerfStressTestCase.class"/>
      <include name="**/test/timer/test/SecureTimerUnitTestCase.class"/>
      <include name="**/test/security/test/client/*UnitTestCase.class"/>
   </patternset>
   <patternset id="security.excludes">
      <exclude name="**/test/naming/test/Security*"/>
      <exclude name="**/test/security/test/*UnitTestCase.class"/>
      <exclude name="**/test/security/test/authorization/*UnitTestCase.class"/>
      <exclude name="**/test/jca/test/SecurityContextUnitTestCase.class"/>
      <exclude name="**/test/jmx/test/Secure*"/>
      <include name="**/test/jmx/test/RMIAdaptorAuthorizationUnitTestCase.class"/>
      <exclude name="**/test/jrmp/test/DynLoadingUnitTestCase.class"/>
      <exclude name="**/test/jrmp/test/DynLoadingFromSARUnitTestCase.class"/>
      <exclude name="**/test/jrmp/test/DynLoadingFromSARUnpackedUnitTestCase.class"/>
      <exclude name="**/test/perf/test/SecurePerfStressTestCase.class"/>
      <exclude name="**/test/timer/test/SecureTimerUnitTestCase.class"/>
      <exclude name="**/test/web/security/authorization/XACMLWeb*.class"/>
      <exclude name="**/test/security/test/client/*UnitTestCase.class"/>
      <exclude name="**/test/passwordinjection/test/*UnitTestCase.class"/>
      <exclude name="**/test/security/test/authorization/secured/*UnitTestCase.class"/>
   </patternset>
   <!-- A patternset that requires jboss to run with a security manager -->
   <patternset id="securitymgr.includes">
      <include name="**/test/securitymgr/test/*TestCase.class"/>
   </patternset>
   <patternset id="securitymgr.excludes">
      <exclude name="**/test/securitymgr/test/*"/>
   </patternset>
	<!-- Patternset for the JSR-196 based unit tests -->
    <patternset id="security.jaspi.includes">
      <include name="**/test/security/container/auth/**/*TestCase.class"/>
      <include name="**/test/security/managers/**/*TestCase.class"/>
      <include name="org/jboss/test/web/security/authorization/*TestCase.class"/>
      <include name="org/jboss/test/web/test/JASPIFormAuthUnitTestCase.class"/>
   </patternset>
   <patternset id="stax.include">
      <include name="org/jboss/test/stax/**/*TestCase.class"/>
   </patternset>
   <!-- Tests needing non-clustered tomcat SSO -->
   <patternset id="tc-sso.includes">
      <include name="org/jboss/test/web/test/SingleSignOnUnitTestCase.class"/>
      <include name="org/jboss/test/web/test/WebProgrammaticLoginTestCase.class"/>
   </patternset>
   <patternset id="tc-sso.excludes">
      <exclude name="org/jboss/test/web/test/SingleSignOnUnitTestCase.class"/>
      <exclude name="org/jboss/test/web/test/WebProgrammaticLoginTestCase.class"/>
   </patternset>
   <!-- Tests needing clustered tomcat SSO -->
   <patternset id="tc-sso-clustered.includes">
      <include name="org/jboss/test/web/test/ClusteredSingleSignOnUnitTestCase.class"/>
   </patternset>
   <patternset id="tc-sso-clustered.excludes">
      <exclude name="org/jboss/test/web/test/ClusteredSingleSignOnUnitTestCase.class"/>
   </patternset>
   <!-- Tests needing tomcat federation -->
   <patternset id="tc-federation.includes">
      <include name="org/jboss/test/web/security/*TestCase.class"/>
      <include name="org/jboss/test/web/test/FormAuthUnitTestCase.class"/>
      <exclude name="org/jboss/test/web/security/GenericHeaderAuthUnitTestCase.class"/>
   </patternset>
   <!-- Tests needing tomcat SSL -->
   <patternset id="tc-ssl.includes">
      <include name="org/jboss/test/web/test/ssl/*TestCase.class"/>
   </patternset>
   <patternset id="tc-ssl.excludes">
      <exclude name="org/jboss/test/web/test/ssl/*"/>
   </patternset>
   <!-- Tests needing tomcat WebCtxLoader set via the UseJBossWebLoader setting -->
   <patternset id="tomcat.webctx.includes">
      <include name="org/jboss/test/web/test/WebCtxLoaderTestCase.class"/>
   	  <include name="org/jboss/test/web/test/VirtualHostTestCase.class"/>
   </patternset>
   <!-- ws-bpel integration tests -->
   <patternset id="jbpm-bpel.includes">
     <include name="org/jboss/test/bpel/**/*TestCase.class"/>
   </patternset>
   <patternset id="jbpm-bpel.excludes">
     <exclude name="org/jboss/test/bpel/**/*TestCase.class"/>
   </patternset>
  <!-- Classloader Leak Tests -->
  <patternset id="classloader-leak.includes">
    <include name="org/jboss/test/classloader/leak/test/*TestCase.class"/>
  </patternset>
  <patternset id="classloader-leak.excludes">
    <exclude name="org/jboss/test/classloader/leak/test/*TestCase.class"/>
  </patternset>
  <patternset id="profileservice.includes">
    <include name="org/jboss/test/profileservice/test/*TestCase.class"/>
  	<include name="org/jboss/test/profileservice/override/test/*TestCase.class"/>
    <!-- deployers + seam + weld -->
  	<include name="org/jboss/test/deployers/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/client/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/ear/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/ejb/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/rar/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/sar/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/web/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/jbas2904/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/seam/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/spaces/test/*UnitTestCase.class"/>
    <include name="org/jboss/test/deployers/weld/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/profileservice/test/JmsDestinationUnitTestCase.class"/>
    <!-- JBAS-8410: exclude Weld libs test, currently manual only -->
    <exclude name="org/jboss/test/deployers/weld/test/WeldTranslator3rdPartyLibExampleUnitTestCase.class"/>
    <!-- Unresolved JIRAs: JBAS-8739 JBAS-8245 with No Release targeted for fixing -->
    <exclude name="org/jboss/test/profileservice/test/Ejb3MetricsUnitTestCase.class"/>
  </patternset>
  <patternset id="profileservice.excludes">
    <exclude name="org/jboss/test/profileservice/test/*TestCase.class"/>
  	<exclude  name="org/jboss/test/profileservice/override/test/*TestCase.class"/>
    <!-- deployers + seam + weld -->
  	<exclude name="org/jboss/test/deployers/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/client/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/ear/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/ejb/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/rar/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/sar/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/web/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/jbas2904/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/seam/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/spaces/test/*UnitTestCase.class"/>
    <exclude name="org/jboss/test/deployers/weld/test/*UnitTestCase.class"/>
  </patternset>
  <patternset id="profileservice.restart.includes">
    <!-- include target for persisted admin changes -->
    <include name="org/jboss/test/profileservice/override/restart/test/*TestCase.class"/>
  </patternset>
  <patternset id="profileservice.restart.excludes">
	<exclude name="org/jboss/test/profileservice/override/restart/test/*TestCase.class"/>
  </patternset>
  <patternset id="springdeployer.includes">
    <include name="org/jboss/test/spring/test/*TestCase.class"/>
  </patternset>
  <patternset id="springdeployer.excludes">
    <exclude name="org/jboss/test/spring/test/*TestCase.class"/>
  </patternset>
  <patternset id="jbas7273.excludes">
    <exclude name="org/jboss/test/ejb3/servlet/unit/ServletUnitTestCase.class"/>
    <exclude name="org/jboss/test/ejb3/servlet/unit/EarServletUnitTestCase.class" /> 
  </patternset>
  <patternset id="ondemand.war.includes">
  	  <include name="org/jboss/test/web/test/BasicOnDemandWarTestCase.class"/>
  </patternset>

   <!-- Tests that are currently broken -->
   <patternset id="badtest.excludes">
      <exclude name="org/jboss/test/aop/test/RemotingUnitTestCase"/>
   	        
      <!-- JBAS-2026 -->
      <exclude name="org/jboss/test/jmx/test/JarInSarJSR77UnitTestCase.class"/>
      <!-- JBAS-4548 -->
      <exclude name="org/jboss/test/deployers/ear/test/EmbeddedDatasourceUnitTestCase.class"/>
     	<!-- JASPI needs revisiting -->
      <exclude name="org/jboss/test/web/test/JASPIFormAuthUnitTestCase.class"/>
   	<!-- New diagnostic test that has transient failures; needs further work -->
   	<exclude name="org/jboss/test/cluster/defaultcfg/simpleweb/test/ClusteredSessionMemoryLeakTestCase.class"/>
   	
   	<!-- Exclude some classloader leak tests on Sun VM only; they should run on JRockit, OpenJDK -->
   	<exclude name="org/jboss/test/classloader/leak/test/AopPreparedClassesClassloaderLeakUnitTestCase.class" if="sun-vm"/>
   	<exclude name="org/jboss/test/cluster/classloader/leak/test/*Field*TestCase.class" if="sun-vm"/>
   	
   	<!-- The FarmedClusterHugeDeploymentUnitTestCase will fail on slaves with inadequate network buffers
      <exclude name="org/jboss/test/cluster/defaultcfg/profileservice/test/FarmedClusterHugeDeploymentUnitTestCase.class"/>
        -->
      <!-- JBAS-7569 -->
      <exclude name="org/jboss/test/console/jbas3861/JBAS3861UnitTestCase.class"/>
   	
   	<!-- JBAS-7703 -->
   	<exclude name="org/jboss/test/web/test/JSPAnnotationENCUnitTestCase.class"/>
      
      <!-- Pending completion of JBAS-5878 / JBPAPP-3674 -->
      <exclude name="org/jboss/test/web/test/StatusServletTestCase.class"/>

      <!-- Pending completion of EJB3 Asynchronous Implementation - EJBTHREE-1721 / JBAS-8146 -->
      <!-- JBAS-8821 -->
      <exclude name="org/jboss/test/ejb3/async/test/AsyncSessionBeanUnitTestCase.class"/>
      
   </patternset>

   <patternset id="aop-with-classloader.excludes">
      <!-- Needs to be started either with the bootclasspath or -javaagent classloader hooks -->
      <exclude name="org/jboss/test/aop/test/Scoped*.class"/>
   </patternset>
   <patternset id="aop-with-classloader.includes">
      <include name="org/jboss/test/aop/test/Scoped*TestCase.class"/>
   </patternset>
   
   <!-- The union of the excludes -->
   <patternset id="all.excludes">
      <patternset refid="aop-with-classloader.excludes"/>
      <patternset refid="badtest.excludes"/>
      <patternset refid="classloader-leak.excludes"/>
      <patternset refid="bootstrap-dependencies.excludes"/>
      <patternset refid="cluster.excludes"/>
      <patternset refid="security.excludes"/>
      <patternset refid="securitymgr.excludes"/>
      <patternset refid="jacc.excludes"/>
      <patternset refid="tc-sso.excludes"/>
      <patternset refid="tc-sso-clustered.excludes"/>
      <patternset refid="tc-ssl.excludes"/>
      <patternset refid="iiop.excludes"/>
      <patternset refid="jbossxb.excludes"/>
      <patternset refid="deployment-service.excludes"/>
      <patternset refid="compatibility.excludes"/>
      <patternset refid="binding-manager.excludes"/>
      <patternset refid="profileservice.excludes"/>
      <patternset refid="profileservice.restart.excludes"/>
      <patternset refid="jbossmessaging.excludes"/>
      <patternset refid="springdeployer.excludes"/>
      <patternset refid="jbas7273.excludes"/>
   </patternset>

   <!-- A target that allows for conditional dependency on the compilation and

    -->
   <target name="maybejars"
      unless="nojars">
      <antcall target="jars" inheritRefs="true"/>
   </target>

   <!-- The top level entry point for all tests that can be run against
   variations of the standard jboss dist. This does not include long
   running benchmark oriented tests.
   -->
   <target name="tests" description="Execute all non-benchmark tests."
      depends="maybejars">
      <record name="${basedir}/output/tests.log" append="no" action="start" loglevel="info"/>
      <property name="nojars" value="true"/>
      <antcall target="jboss-minimal-tests" inheritRefs="true"/>
      <antcall target="jboss-all-config-tests" inheritRefs="true"/>
      <antcall target="tests-profileservice" inheritRefs="true"/>
      <antcall target="tests-bootstrap-dependencies" inheritRefs="true"/>
      <antcall target="tests-springdeployer" inheritRefs="true"/>
      <antcall target="tests-clustering-all-stacks" inheritRefs="true"/>
      <antcall target="tomcat-ssl-tests" inheritRefs="true"/>
      <antcall target="tomcat-sso-tests" inheritRefs="true"/>
      <antcall target="tomcat-sso-clustered-tests" inheritRefs="true"/>
      <antcall target="tomcat-webctx-tests" inheritRefs="true"/>
      <antcall target="tomcat-federation-tests" inheritRefs="true"/>
      <antcall target="tests-binding-manager" inheritRefs="true"/>
      <antcall target="tests-hornetq" inheritRefs="true"/>
      <antcall target="tests-aop-scoped" inheritRefs="true"/>
      <antcall target="tests-clustered-profileservice" inheritRefs="true"/>
      <antcall target="tests-web-ondemand-disabled" inheritRefs="true"/>
      <antcall target="tests-jts" inheritRefs="true"/>
      <antcall target="tests-jacc-security" inheritRefs="true"/>
      <antcall target="tests-jacc-security-allstarrole" inheritRefs="true"/>
      <antcall target="tests-jacc-securitymgr" inheritRefs="true"/>
      <antcall target="tests-mod_cluster" inheritRefs="true"/>
      <antcall target="tests-ha-mod_cluster" inheritRefs="true"/>
      <!-- <antcall target="tests-security-manager" inheritRefs="true"/> -->
      <!-- <antcall target="tests-security-jaspi-unit"/> -->
      <!-- JBAS-7247 classloader leak tests have been moved out of this target; see target tests-all-classloader-leak -->
      <!-- JBAS-7154 <antcall target="tests-compatibility" inheritRefs="true"/> -->
      <!-- JBAS-7680 the current 'web' profile is not an EE6 web profile and doesn't include JPA, so these WebJPA tests are disabled
           <antcall target="tests-web-profile" inheritRefs="true"/> -->
      <antcall target="tests-report" inheritRefs="true"/>
      <!-- JBAS-5918 https://issues.apache.org/bugzilla/show_bug.cgi?id=41368 
      <record name="${basedir}/output/tests.log" action="stop"/> -->

      <condition property="servers.shutdown.failed">
         <and>
            <not><isset property="servers.shutdown.nocheck"/></not>
            <isfileselected file="output/tests.log">
               <or>
                  <contains text="Unable to shutdown server properly"/>
                  <not><contains text="[server:stop]"/></not>
               </or>
            </isfileselected>
         </and>
      </condition>
      <fail message="Some servers failed to shutdown cleanly."
         if="servers.shutdown.failed"/>
   </target>

   <target name="tests-stress" description="Execute all stress tests."
      depends="tests-standard-stress,
               tests-report">
   </target>

   <target name="jboss-minimal-tests" depends="init"
      description="Validate the minimal config">
      <server:start name="minimal"/>
      <copy file="${build.lib}/shutdown.sar"
         todir="${jboss.dist}/server/minimal/deploy" />
      <echo message="Minimal server started, stopping"/>
      <sleep seconds="7"/>
      <delete file="${jboss.dist}/server/minimal/deploy/shutdown.sar" />
      <sleep seconds="7"/>
   </target>

   <target name="jboss-all-config-tests"
      description="The units tests which are run against the jboss all config" depends="init">
      <server:start name="all"/>
      <antcall target="tests-standard-unit" inheritRefs="true"/>
      <antcall target="tests-client-unit" inheritRefs="true"/>
      <antcall target="tests-security-basic-unit" inheritRefs="true"/>
      <antcall target="tests-standard-stress" inheritRefs="true"/>
      <antcall target="tests-jbossmx-compliance" inheritRefs="true"/>
      <antcall target="tests-jbossmx-implementation" inheritRefs="true"/>
      <antcall target="tests-jbossmx-performance" inheritRefs="true"/>
      <antcall target="tests-iiop" inheritRefs="true"/>
      <antcall target="tests-scout-jaxr" inheritRefs="true"/>
      <antcall target="tests-webservice" inheritRefs="true"/>
      <antcall target="tests-ws" inheritRefs="true"/>
      <!--<antcall target="tests-aspects" inheritRefs="true"/>-->
      <server:stop name="all"/>
   </target>

   <target name="smoke-tests"
      description="A basic set of units tests which are run against the jboss all config" depends="init">
      <server:start name="all"/>
      <antcall target="smoke-tests-raw" inheritRefs="true"/>
      <server:stop name="all"/>
   </target>

   <target name="stress-tests"
      description="A basic set of units tests which are run against the jboss all config" depends="init">
      <server:start name="all"/>
      <antcall target="tests-standard-stress" inheritRefs="true"/>
      <server:stop name="all"/>
   </target>

   <target name="tests-profileservice" depends="init" description="Tests with the full featured profile service">
      <create-profileservice-config baseconf="default" conf="profileservice"/>
      <server:start name="profileservice"/>
      <run-junit
         junit.patternset="profileservice.includes"
         junit.configuration="profileservice"
      />
      <server:stop name="profileservice"/>
	  <!-- test profileservice persistence, after restarting AS -->       	
      <server:start name="profileservice"/>
      <run-junit
         junit.patternset="profileservice.restart.includes"
         junit.configuration="profileservice"
      />
      <server:stop name="profileservice"/>
   </target>
   <target name="profileservice-config" description="Create the full featured profile service config">
      <create-profileservice-config baseconf="default" conf="profileservice"/>
   </target>

	<!-- Create the embedded configuration -->
   <target name="embedded-config" description="Create the xml based configuration.">
      <create-profileservice-config baseconf="all" conf="embedded"/>
   </target>
	
   <target name="tests-web-profile" depends="init" description="Tests with the web profile">
      <server:start name="web"/>
      <antcall target="run-web-profile-unit" inheritRefs="true"/>
      <server:stop name="web"/>
   </target>
   
   <target name="tests-springdeployer" depends="init" description="Tests with the full featured spring deployer">
      <create-springdeployer-config baseconf="default" conf="springdeployer"/>
      <server:start name="springdeployer"/>
      <run-junit junit.patternset="springdeployer.includes" junit.configuration="springdeployer"/>
      <server:stop name="springdeployer"/>
   </target>
   <target name="springdeployer-config" description="Create the full featured spring deployer config">
      <create-springdeployer-config baseconf="default" conf="springdeployer"/>
   </target>

   <!-- Tests of tomcat needing a ssl connector
   -->
   <target name="tomcat-ssl-tests" depends="init"
      description="Tomcat tests requiring an SSL connector">
      <!-- Create the ssl enabled tomcat config -->
      <create-config baseconf="default" newconf="tomcat-ssl">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>

      <server:start name="tomcat-ssl"/>

      <!-- Specify the JSSE properties -->
      <property name="javax.net.ssl.keyStore"
         value="${build.resources}/test-configs/tomcat-ssl/conf/client.keystore"/>
      <property name="javax.net.ssl.keyStorePassword" value="unit-tests-client"/>
      <property name="javax.net.ssl.trustStore"
         value="${build.resources}/test-configs/tomcat-ssl/conf/client.keystore"/>
      <property name="javax.net.ssl.trustStorePassword" value="unit-tests-client"/>

      <propertyset id="tomcat-ssl-tests-props">
         <propertyref prefix="javax.net.ssl"/>
      </propertyset>
      <run-junit junit.patternset="tc-ssl.includes"
        junit.configuration="tomcat-ssl-tests"
	junit.syspropertyset="tomcat-ssl-tests-props" />

      <server:stop name="tomcat-ssl"/>
   </target>

   <!-- Tests of tomcat requiring SSO configured
   -->
   <target name="tomcat-sso-tests" depends="init"
      description="Tomcat tests requiring SSO configured">
      <!-- Create the sso enabled tomcat config starting with the default config -->
      <create-config baseconf="default" newconf="tomcat-sso">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <server:start name="tomcat-sso"/>
      <run-junit junit.patternset="tc-sso.includes"
	junit.configuration="tomcat-sso" />
      <server:stop name="tomcat-sso"/>
   </target>

   <target name="tomcat-sso-clustered-tests" depends="init"
     description="Tomcat tests requiring clustered SSO configured">
    <!-- Create the sso enabled tomcat config starting with the all config -->
    <create-cluster-sso-node newconf="tomcat-sso-cluster0"/>
    <create-cluster-sso-node newconf="tomcat-sso-cluster1"/>
  
    <echo message="Modifying the node0 and node1 Tomcat configuration for REPL_SYNC/UseJK"/>
    <http-cluster-node-config-change conf="tomcat-sso-cluster0"/>
    <http-cluster-node-config-change conf="tomcat-sso-cluster1"/>

    <server:start name="tomcat-sso-cluster0"/>
    <server:start name="tomcat-sso-cluster1"/>

    <antcall target="tests-clustering-unit" inheritRefs="true">
      <param name="cluster.includes.refid" value="tc-sso-clustered.includes"/>
      <param name="jboss-junit-configuration" value="tomcat-sso-cluster"/>
    </antcall>

    <server:stop name="tomcat-sso-cluster0"/>
    <server:stop name="tomcat-sso-cluster1"/>

    <!-- BuddyReplication enabled tests are eliminated as that's not a valid usage -->
   </target>

	 <!-- Tests that require the attribute "UseJBossWebLoader" set to true -->
   <target name="tomcat-webctx-tests" depends="init"
       description="Tomcat tests requiring classloader set to the web loader">
       <create-config baseconf="default" newconf="tomcat-webctx"
         newconf-src="tomcat-webctx">
        <patternset>
           <include name="conf/**"/>
           <include name="deployers/**"/>
           <include name="deploy/**"/>
           <include name="lib/**"/>           
         </patternset>
      </create-config>

       <server:start name="tomcat-webctx"/>
       <run-junit junit.patternset="tomcat.webctx.includes"
	junit.configuration="tomcat-webctx"  />
       <server:stop name="tomcat-webctx"/>
    </target>

   <!-- Tests of tomcat requiring Federation configured
   -->
   <target name="tomcat-federation-tests" depends="init"
      description="Tomcat tests requiring Federation configured">
      <!-- Create the federation enabled tomcat config starting with the default config -->
      <create-config baseconf="default" newconf="tomcat-federation">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <copy file="${source.resources}/web/federation/authext/war-deployers-jboss-beans.xml" overwrite="true" todir="${jboss.dist}/server/tomcat-federation/deployers/jbossweb.deployer/META-INF" />
      <copy file="${build.lib}/header-auth.jar" overwrite="true" todir="${jboss.dist}/server/tomcat-federation/deploy/jbossweb.sar" />
      <server:start name="tomcat-federation"/>
      <run-junit junit.patternset="tc-federation.includes"
	junit.configuration="tomcat-federation" />
      <server:stop name="tomcat-federation"/>
   </target>

   <!-- Tests that on-demand webapps work if started as part of server start -->
   <target name="tests-web-ondemand-disabled" depends="init"
      description="Tests that on-demand webapps work if started as part of server start ">
      <create-config baseconf="default" newconf="web-ondemand-disabled">
       <patternset>
          <include name="conf/**"/>
          <include name="deployers/**"/>
          <include name="deploy/**"/>
          <include name="lib/**"/>           
       </patternset>
      </create-config>

      <server:start name="web-ondemand-disabled"/>
      <run-junit junit.patternset="ondemand.war.includes"
           junit.configuration="web-ondemand-disabled"  />
      <server:stop name="web-ondemand-disabled"/>
   </target>

   <target name="tests-binding-manager" depends="init"
     description="Test for clean startup with service binding manager">
   	
     <create-cluster-node conf="binding-manager1"/>
     <create-cluster-node conf="binding-manager2"/>
     <server:start name="binding-manager1"/>
     <server:start name="binding-manager2"/>

     <run-junit junit.patternset="binding-manager.includes"
	            junit.configuration="binding-manager" />

     <server:stop name="binding-manager1"/>
     <server:stop name="binding-manager2"/>
   </target>

   <!--
     | Tests DeploymentService
   -->
   <target name="deployment-service-tests"
      description="Tests targeting the deployment service">
      <!-- Create clean configuration -->
      <delete dir="${jboss.dist}/server/deployment-service" />
      <create-config baseconf="default" newconf="deployment-service">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <!-- overlay the deployment-service stuff -->
      <copy todir="${jboss.dist}/server/deployment-service/conf">
         <fileset dir="${jboss.dist}/docs/examples/varia/deployment-service">
            <include name="templates/**"/>
         </fileset>
      </copy>
      <copy todir="${jboss.dist}/server/deployment-service/deploy">
         <fileset dir="${jboss.dist}/docs/examples/varia/deployment-service">
            <include name="deployment-service.sar"/>
         </fileset>
      </copy>
      <server:start name="deployment-service"/>
      <antcall target="deployment-service-unit-tests">
         <param name="jboss-junit-configuration" value="DeploymentService"/>
      </antcall>
      <server:stop name="deployment-service"/>
   </target>

   <target name="deployment-service-unit-tests">
     <run-junit junit.patternset="deployment-service.includes"
        junit.configuration="deployment-service"/>
   </target>

  <!--
     A minimal set of tests
     
     This should have a wide variety of basic tests,
     that don't take very long to run.
  -->
  <target name="smoke-tests-raw" depends="init">
      <echo><![CDATA[
   junit.timeout:              ${junit.timeout}
   jbosstest.iterationcount:   ${jbosstest.iterationcount}
   jbosstest.threadcount:      ${jbosstest.threadcount}
   jbosstest.beancount:        ${jbosstest.beancount}
         ]]></echo>
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}"
          failureproperty="smoke.test.failure">

         <jvmarg line="${junit.jvm.options}"/>

         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.useJBM" value="true"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      	 <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="smoketests.classpath"/>
         </classpath>

         <formatter type="plain" usefile="${junit.formatter.usefile}"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/aop/test/AOPUnitTestCase.class"/>
               <include name="org/jboss/test/classloader/test/ScopingUnitTestCase.class"/>
               <include name="org/jboss/test/cts/test/*UnitTestCase.class"/>
               <exclude name="org/jboss/test/cts/test/StatefulSessionLocalUnitTestCase.class"/>
               <exclude name="org/jboss/test/cts/test/StatefulSessionUnitTestCase.class"/>
               <exclude name="org/jboss/test/cts/test/LongWaitStatefulSessionUnitTestCase.class"/>
               <include name="org/jboss/test/ejb3/test/SimpleSessionUnitTestCase.class"/>
               <include name="org/jboss/test/jbossmessaging/test/JoramUnitTestCase.class"/>
               <include name="org/jboss/test/jca/test/BaseConnectionManagerUnitTestCase.class"/>
               <include name="org/jboss/test/jca/test/PoolingUnitTestCase.class"/>
               <include name="org/jboss/test/jca/test/XADSUnitTestCase.class"/>
               <include name="org/jboss/test/jmsra/test/*UnitTestCase.class"/>
               <include name="org/jboss/test/naming/test/SimpleUnitTestCase.class"/>
               <include name="org/jboss/test/tm/test/TransactionManagerUnitTestCase.class"/>
               <include name="org/jboss/test/web/test/WebIntegrationUnitTestCase.class"/>
               <include name="org/jboss/test/xml/DDValidatorUnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
      
      <!-- Check if some test failed (smoke.test.failure property will be set by JUnit
      	if there are any failures -->
      <antcall target="check.smoke.test.failure"/>
      
   </target>
    
    <target name="check.smoke.test.failure" if="smoke.test.failure">
		<fail message="Some tests FAILED. Check the logs for details"/>
	</target>

  <!--
     Web Profile Tests
  -->
  <target name="run-web-profile-unit" depends="init">
      <echo><![CDATA[
   junit.timeout:              ${junit.timeout}
   jbosstest.iterationcount:   ${jbosstest.iterationcount}
   jbosstest.threadcount:      ${jbosstest.threadcount}
   jbosstest.beancount:        ${jbosstest.beancount}
         ]]></echo>
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>

         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.factory.initial" value="org.jboss.naming.HttpNamingContextFactory"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.http.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.useJBM" value="true"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      	 <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <sysproperty key="jboss-junit-configuration" value="web-profile"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-web-profile.xml"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}" extension="-web-profile.txt"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/jpa/test/WebClassesJPAUnitTestCase.class"/>
               <include name="org/jboss/test/jpa/test/WebLibsJPAUnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | Standard tests that should run successfully against a default JBoss
      | server distribution build.
    -->

  <target name="tests-standard-unit" depends="init">
      <echo><![CDATA[
   junit.timeout:              ${junit.timeout}
   jbosstest.iterationcount:   ${jbosstest.iterationcount}
   jbosstest.threadcount:      ${jbosstest.threadcount}
   jbosstest.beancount:        ${jbosstest.beancount}
         ]]></echo>
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.useJBM" value="true"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      	 <!-- used by NamingRestartUnitTestcase -->
         <sysproperty key="jbosstest.naming.autodiscovery.mcast_adddr" value="${jbosstest.naming.autodiscovery.mcast_addr}"/>

      	 <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <formatter type="xml" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/*UnitTestCase.class"/>
               <patternset refid="all.excludes"/>
               <exclude name="**/test/xa/test/XAUnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="tests-standard-stress" depends="init">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
	 <sysproperty key="jboss-junit-configuration" value="tests-standard-stress"/>
	 <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
		  usefile="${junit.formatter.usefile}"
		  extension="-tests-standard-stress.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/*StressTestCase.class"/>
               <patternset refid="all.excludes"/>
            </fileset>
         </batchtest>
      </junit>
   </target>


   <!--
      | Tests that need to be run by loading the testcase code from a client
      | jar rather than the build.classes.dir. Typically these tests need to
      | control how classes are loaded.
    -->
   <target name="tests-client-unit">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="jbosstest.secure" value="true"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />    	
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <jvmarg value="-Djava.security.manager"/>
         <sysproperty key="java.security.policy"
            value="${build.resources}/security/tst.policy"/>
         <sysproperty key="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>

         <classpath>
            <pathelement path="${build.lib}/jrmp-dl-client.jar"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-client-unit"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-client-unit.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/jrmp/test/DynLoadingUnitTestCase.class"/>
               <include name="org/jboss/test/jrmp/test/DynLoadingFromSARUnitTestCase.class"/>
               <include name="org/jboss/test/jrmp/test/DynLoadingFromSARUnpackedUnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | Standard security tests that should run successfully against a default
      | JBoss server distribution build.
    -->
   <target name="tests-security-basic-unit" depends="init">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <property name="jbosstest.secure" value="true"/>
      <property name="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <propertyset id="security-tests-props">
         <propertyref prefix="java.security.auth"/>
      </propertyset>
      <run-junit junit.patternset="security.includes"
         junit.syspropertyset="security-tests-props"
         junit.configuration="tests-security-basic-unit" />
   </target>

   <!-- Tests of Java2 permissions. The JBoss server must be running with
    a security manager for this test -->
   <target name="tests-security-manager" depends="init"
      description="Tests run against a jboss server with a security manager">

      <create-config baseconf="default" newconf="secmgr">
        <patternset>
           <include name="conf/**"/>
           <include name="deployers/**"/>
           <include name="deploy/**"/>
           <include name="lib/**"/>
        </patternset>
      </create-config>


      <echo message="Starting secmgr with policy ${build.resources}/securitymgr/server.policy" />
      <echo message="jboss.home.dir=${jboss.dist}" />
      <echo message="jboss.server.home.dir=${jboss.dist}${/}server${/}secmgr" />
      <echo message="java.naming.provider.url=${node0.jndi.url}" />
      <echo message="jbosstest.server.host=${node0}" />

      <server:start name="securitymgr"/>

      <junit dir="${module.output}"
         printsummary="true"
         haltonerror="false"
         haltonfailure="false"
         fork="true"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jboss.home" file="${project.root}"/>
         <sysproperty key="jboss.thirdparty.dir" file="${project.root}/thirdparty"/>
         <sysproperty key="jboss.tools.dir" file="${project.root}/tools"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="jbosstest.secure" value="true"/>
         <sysproperty key="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <classpath>
            <pathelement location="${build.resources}"/>
            <pathelement location="${build.classes}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <sysproperty key="jboss-junit-configuration" value="tests-security-manager"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-security-manager.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="false"
            haltonfailure="false"
            fork="true">

            <fileset dir="${build.classes}">
               <exclude name="org/jboss/test/securitymgr/test/PolicyUnitTestCase.class"/>
                <patternset refid="securitymgr.includes"/>
            </fileset>
         </batchtest>
      </junit>
   	<!--
      <echo>Waiting for server to shutdown...</echo>
      <server:stop name="securitymgr"/> -->
   </target>

   <!-- Tests of the JACC security implementation -->
   <target name="tests-jacc-security" depends="init"
      description="Tests run against a jboss server with JACC configured">
      <!-- Create the ssl enabled tomcat config -->
      <create-config baseconf="default" newconf="jacc">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <!-- Copy the test-destinations-service.xml to the all config.
          Additionally this file should be there in the jacc config
      <copy file="${build.resources}/messaging/test-destinations-full-service.xml"
      todir="${jboss.dist}/server/jacc/deploy" />
      -->

      <server:start name="jacc"/>

      <!-- ROOT.war is needed for confirmation that the server has started. But there is a test case "WebIntegrationUnitTestCase" that tries to replace the root context war. So delete the ROOT.war 
      <delete dir="${jboss.dist}/server/jacc/deploy/ROOT.war" />
     -->

      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>

     <property name="jbosstest.secure" value="true"/>
     <property name="jboss.security.jacc" value="true" />
     <property name="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
     <propertyset id="jacc-tests-props">
        <propertyref prefix="java.security.auth"/>
		<propertyref prefix="jboss.security"/>
     </propertyset>

     <run-junit junit.patternset="jacc.includes"
        junit.configuration="JACC"
	junit.syspropertyset="jacc-tests-props" />

      <server:stop name="jacc"/>
   </target>

   <target name="tests-jacc-securitymgr" depends="init"
     description="Tests run against a jboss server with JACC configured + security manager">
      <!-- Create the security manager enabled jacc -->
      <create-config baseconf="default" newconf="jacc-securitymgr" newconf-src="jacc">
       <patternset>
          <include name="conf/**"/>
          <include name="deployers/**"/>
          <include name="deploy/**"/>
          <include name="lib/**"/>
       </patternset>
     </create-config>
     <server:start name="jacc-securitymgr"/>

     <mkdir dir="${build.reports}"/>
     <mkdir dir="${build.testlog}"/>


      <property name="jbosstest.secure" value="true"/>
      <property name="jboss.security.jacc" value="true" />
      <property name="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <propertyset id="jacc-tests-props">
         <propertyref prefix="java.security.auth"/>
      </propertyset>

      <propertyset id="jacc-tests-props">
      <propertyref prefix="java.security.auth"/>
      <propertyref prefix="jboss.security"/>
      </propertyset>

      <run-junit junit.patternset="jacc.includes"
         junit.configuration="JACC+SecurityMgr"
         junit.syspropertyset="jacc-tests-props" />

     <server:stop name="jacc-securitymgr"/>
   </target>

   <target name="tests-jacc-security-allstarrole" depends="init"
     description="Tests run against a jboss server with JACC configured + security manager">
      <!-- Create the security manager enabled jacc -->
      <create-config baseconf="default" newconf="jacc-security-allstarrole" newconf-src="jacc">
       <patternset>
          <include name="conf/**"/>
          <include name="deployers/**"/>
          <include name="deploy/**"/>
          <include name="lib/**"/>
       </patternset>
     </create-config>

    <!-- Use the test policy provider -->
    <copy todir="${jboss.dist}/server/jacc-security-allstarrole/deployers" file="${build.resources}/test-configs/jacc-security-allstarrole/deployers/jacc-jboss-beans.xml" overwrite="true"/>
     <!-- Copy the jacc allStarRolePolicyProvider jar -->
    <copy todir="${jboss.dist}/server/jacc-security-allstarrole/lib" file="${build.lib}/jacc-allStarRolePolicyProvider.jar"/>

     <server:start name="jacc-security-allstarrole"/>

     <mkdir dir="${build.reports}"/>
     <mkdir dir="${build.testlog}"/>

      <property name="jbosstest.secure" value="true"/>
      <property name="jboss.security.jacc" value="true" />
      <property name="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>
      <propertyset id="jacc-tests-props">
      <propertyref prefix="java.security.auth"/>
      </propertyset>

      <propertyset id="jacc-tests-props">
      <propertyref prefix="java.security.auth"/>
      <propertyref prefix="jboss.security"/>
      </propertyset>

      <run-junit junit.patternset="jacc.allstarrole.includes"
         junit.configuration="JACC+allstarrole"
         junit.syspropertyset="jacc-tests-props" />

     <server:stop name="jacc-security-allstarrole"/>
   </target>

   <!--
      | JSR196 Based Unit Tests
    -->
   <target name="tests-security-jaspi-unit" depends="init"
     description="Tests run against a jboss server with jaspi configured">
      <create-config baseconf="default" newconf="jaspi">
	   <patternset>
          <include name="conf/**"/>
          <include name="deployers/**"/>
          <include name="deploy/**"/>
          <include name="lib/**"/>
       </patternset>
     </create-config>
      <server:start name="jaspi"/>

     <mkdir dir="${build.reports}"/>
     <mkdir dir="${build.testlog}"/>


      <property name="jbosstest.secure" value="true"/>
      <property name="java.security.auth.login.config"
        value="${build.resources}/security/auth.conf"/>

      <propertyset id="jacc-tests-props">
         <propertyref prefix="java.security.auth"/>
	 <propertyref prefix="jboss.security"/>
      </propertyset>

      <run-junit junit.patternset="security.jaspi.includes" junit.configuration="tests-security-jaspi"/>

     <server:stop name="jaspi"/>
   </target>

<!-- Ldap Tests-->
   <target name="tests-ldap"
      description="Tests run against a jboss server with opends configured">
      <create-config baseconf="default" newconf="opends">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>

      <copy file="${build.lib}/opends.sar"
        todir="${jboss.dist}/server/opends/deploy" />
      <server:start name="opends"/>

      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>

     <property name="jbosstest.secure" value="true"/>
     <property name="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
     <property name="jboss.security.ldap.ctxfactory"
            value="com.sun.jndi.ldap.LdapCtxFactory"/>

     <propertyset id="opends-tests-props">
        <propertyref prefix="java.security.auth"/>
	<propertyref prefix="jboss.security"/>
     </propertyset>
     <run-junit junit.patternset="ldap.includes"
        junit.configuration="opends"
	junit.syspropertyset="opends-tests-props" />
      <server:stop name="opends"/>
   </target>


   <target name="tests-standalone-aop-unit">
      <!--
          <antcall target="tests-treecacheaop-unit" inheritRefs="true"/>
      -->
      <antcall target="tests-treecacheaopc-unit" inheritRefs="true"/>
      <antcall target="tests-baseaop-unit" inheritRefs="true"/>
   </target>

  <target name="tests-compatibility"
    description="Checks compatibility on SerialUUID" depends="init">
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="true"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <jvmarg value="-XX:MaxPermSize=768m"/>
      <jvmarg value="-Xms256m"/>
      <jvmarg value="-Xmx512m"/>
      <sysproperty key="jboss.dist" file="${jboss.dist}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      <!-- Pass along any jbosstest.* system properties -->
      <syspropertyset>
        <propertyref prefix="jbosstest."/>
      </syspropertyset>

      <!-- This runs with a minimal classpath as the jboss classes need to
         be loaded in a seperate class loader.
      -->
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <fileset refid="org.jboss.test:jboss-test:jar"/>
        <fileset refid="org.jboss.jbossas:jboss-as-varia:jar"/>
        <fileset refid="junit:junit:jar"/>
      </classpath>

      <!--formatter type="xml" usefile="${junit.formatter.usefile}"/-->
      <sysproperty key="jboss-junit-configuration" value="tests-compatibility"/>
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                 usefile="${junit.formatter.usefile}"
                 extension="-tests-compatibility.xml"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <patternset refid="compatibility.includes"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


   <target name="tests-treecacheaop-unit" depends="init">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg value="-Djava.system.class.loader=org.jboss.aop.standalone.SystemClassLoader"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="jboss.aop.path" file="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}/cache/standalone"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/-->
         <sysproperty key="jboss-junit-configuration" value="tests-treecacheaop-unit"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-treecacheaop-unit.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/cache/test/standAloneAop/*AopTest.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="tests-treecacheaopc-unit" depends="init">
      <!-- pre-compile the aop classes -->
      <taskdef name="aopc" classname="org.jboss.aop.ant.AopC" classpathref="org.jboss.aop.classpath"/>
      <path id="aop.task.classpath">
         <fileset refid="javassist:javassist:jar"/>
         <path refid="trove.classpath"/>
         <path refid="org.jboss.aop.classpath"/>
         <fileset refid="org.jboss:jboss-common-core:jar"/>
         <fileset refid="org.jboss.logging:jboss-logging:jar"/>
      </path>

      <aopc compilerclasspathref="aop.task.classpath">
         <classpath refid="thirdparty.classpath"/>
         <classpath path="${build.classes}"/>
         <src path="${build.classes}"/>
         <include name="org/jboss/test/cache/test/standAloneAop/**"/>
         <aoppath path="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>
      </aopc>

      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="jboss.aop.path" file="${source.resources}/cache/standalone/META-INF/jboss-aop.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}/cache/standalone"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-treecacheaopc-unit"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-treecacheaopc-unit.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/cache/test/standAloneAop/*AopTest.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>


   <target name="tests-baseaop-unit" depends="init">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <sysproperty key="java.system.class.loader" value="org.jboss.aop.standalone.SystemClassLoader"/>
         <sysproperty key="jboss.aop.path" file="${source.resources}/aop/META-INF/jboss-aop.xml"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-baseaop-unit"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-baseaop-unit.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/aop/nonjunit/StandaloneTest.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | JBossMX implementation tests that should run correctly.
    -->
   <target name="tests-jbossmx-implementation">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>

         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-jbossmx-implementation"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-jbossmx-implementation.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/jbossmx/implementation/**/*TestCase.class"/>
               <!-- Ignore the abstract class -->
               <exclude name="org/jboss/test/jbossmx/implementation/TestCase.class"/>
               <exclude name="org/jboss/test/jmx/test/SecureJMXInvokerUnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | JBossMX performance tests that should run correctly.
    -->
   <target name="tests-jbossmx-performance">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>

         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-jbossmx-performance"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-jbossmx-performance.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/jbossmx/performance/**/*TestCase.class"/>
               <!-- Ignore the abstract class -->
               <exclude name="org/jboss/test/jbossmx/performance/TestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | JBossMX compliance tests that should run correctly.
    -->
   <target name="tests-jbossmx-compliance">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>

         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-jbossmx-compliance"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-jbossmx-compliance.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/jbossmx/compliance/**/*TestCase.class"/>
               <!-- Ignore the abstract class -->
               <exclude name="org/jboss/test/jbossmx/compliance/TestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | IIOP test cases that should run successfully
    -->
   <target name="tests-iiop" depends="init">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
         <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
         <jvmarg value="-Djacorb.orb.print_version=off"/>
         <jvmarg value="-Djacorb.log.default.verbosity=0"/>
         <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
         <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
         <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
         <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
         <jvmarg value="-DORBInitRef.NameService=corbaloc::${node0}:3528/JBoss/Naming/root"/>
         <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
         <jvmarg value="-Djava.security.manager"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="java.security.policy" value="${build.resources}/iiop/client.policy"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
            <fileset refid="org.jboss.jbossas:jboss-as-iiop:jar"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-iiop"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-iiop.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <patternset refid="iiop.includes"/>
            </fileset>
         </batchtest>
      </junit>
  </target>

  <!-- Test the XML binding framework -->
  <target name="tests-xml-unit">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>

      <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
      <sysproperty key="jboss-junit-configuration" value="tests-xml-unit"/>
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                 usefile="${junit.formatter.usefile}"
                 extension="-tests-xml-unit.xml"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">

         <fileset dir="${build.classes}">
            <patternset refid="jbossxb.includes"/>
         </fileset>
      </batchtest>
    </junit>
  </target>

   <!-- Test StAX JAS-173  -->
   <target name="tests-stax" depends="maybejars">
     <mkdir dir="${build.reports}"/>
     <mkdir dir="${build.testlog}"/>
     <junit dir="${module.output}"
       printsummary="${junit.printsummary}"
       haltonerror="${junit.haltonerror}"
       haltonfailure="${junit.haltonfailure}"
       fork="${junit.fork}"
       timeout="${junit.timeout}"
       jvm="${junit.jvm}">

       <jvmarg line="${junit.jvm.options}"/>
       <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
       <sysproperty key="build.testlog" value="${build.testlog}"/>
       <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
       <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
       <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
       <!-- Pass along any jbosstest.* system properties -->
       <syspropertyset>
          <propertyref prefix="jbosstest."/>
       </syspropertyset>

       <classpath>
         <pathelement location="${build.classes}"/>
         <pathelement location="${build.resources}"/>
         <path refid="tests.classpath"/>
       </classpath>

       <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/-->
       <sysproperty key="jboss-junit-configuration" value="tests-stax"/>
       <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                  usefile="${junit.formatter.usefile}"
                  extension="-tests-stax.xml"/>

       <batchtest todir="${build.reports}"
          haltonerror="${junit.batchtest.haltonerror}"
          haltonfailure="${junit.batchtest.haltonfailure}"
          fork="${junit.batchtest.fork}">

          <fileset dir="${build.classes}">
             <patternset refid="stax.includes"/>
          </fileset>
       </batchtest>
     </junit>
   </target>

    <!-- Run the Web Services Tests-->
   <target name="tests-webservice" depends="init" 
      description="Execute Web Services Related Tests">

      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         showoutput="${junit.showoutput}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="jbosstest.secure" value="true"/>

         <jvmarg value="-Djava.security.manager"/>
         <sysproperty key="java.security.policy" value="${build.resources}/security/tst.policy"/>
         <sysproperty key="java.security.auth.login.config" value="${build.resources}/security/auth.conf"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <!-- Prevent IOException: unknown protocol: vfs -->
         <sysproperty key="java.protocol.handler.pkgs" value="org.jboss.vfs.protocol"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      	
      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <!-- The crimson parser cannot do schema validation, which we need for jaxrpc-mapping.xml -->
         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}/security"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-webservice"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-webservice.xml"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/webservice/**/*TestCase.class"/>
               <exclude name="org/jboss/test/webservice/jbws309/**"/>
            </fileset>
         </batchtest>
      </junit>
   </target>
   
   <!-- Run the Web Services JAX-WS Tests-->
   <target name="tests-ws"
      description="Execute Web Services JAX-WS Related Tests"
   	depends="init">

      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         showoutput="${junit.showoutput}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="jbosstest.secure" value="true"/>

         <jvmarg value="-Djava.security.manager"/>
         <sysproperty key="java.security.policy" value="${build.resources}/security/tst.policy"/>
         <sysproperty key="java.security.auth.login.config" value="${build.resources}/security/auth.conf"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      	<!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <!-- The crimson parser cannot do schema validation, which we need for jaxrpc-mapping.xml -->
         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}/security"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-webservice"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-ws.xml"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/ws/**/*TestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
    | Standard jaxr tests that should run successfully against a
    | JBoss server distribution build that contains jaxr.
   -->
   <!-- Test for JAXR under the Web Services Umbrella -->
   <target name="tests-scout-jaxr" >
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
            printsummary="${junit.printsummary}"
            haltonerror="${junit.haltonerror}"
            haltonfailure="${junit.haltonfailure}"
            fork="${junit.fork}"
            timeout="${junit.timeout}"
            jvm="${junit.jvm}"
            failureProperty="tests.failure">

         <!-- JPDA Debugging begin-->
         <!--
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=NONE"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8686"/>
         -->
         <!-- End JPDA Debuuging begin-->

         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="javax.xml.registry.ConnectionFactoryClass" value="org.apache.ws.scout.registry.ConnectionFactoryImpl"/>
         <sysproperty key="jaxr.query.url" value="http://${node0.url}:8080/juddi/inquiry"/>
         <sysproperty key="jaxr.publish.url" value="http://${node0.url}:8080/juddi/publish"/>
         <sysproperty key="scout.proxy.transportClass" value="org.jboss.jaxr.scout.transport.SaajTransport"/>
         <sysproperty key="host.name" value="${node0}"/>
         <sysproperty key="host.name.url" value="${node0.url}"/>
         <sysproperty key="jndi.bind.name" value="JAXR"/>
         <sysproperty key="jaxr.debug" value="true"/>
         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />    	
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
           <pathelement location="${build.classes}"/>
	   <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-scout-jaxr"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}"
                    extension="-tests-scout-jaxr.xml"/>
	 <formatter type="plain" usefile="${junit.formatter.usefile}"/>

	 <batchtest todir="${build.reports}"
	    haltonerror="${junit.batchtest.haltonerror}"
	    haltonfailure="${junit.batchtest.haltonfailure}"
	    fork="${junit.batchtest.fork}">

	    <fileset dir="${build.classes}">
	       <patternset refid="jaxr.includes"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   
   <!-- The scoped AOP tests need a classloader hook -->
   <target name="tests-aop-scoped" depends="init"
      description="AOP tests requiring a native classloader hook">

      <!-- copy across the pluggable instrumentor -->
      <copy tofile="${jboss.dist}/bin/pluggable-instrumentor.jar" 
            file="${org.jboss.aop:pluggable-instrumentor:jar}"/>
      <create-config baseconf="all" newconf="scoped-aop-jdk50">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="deploy-hasingleton/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <server:start name="scoped-aop-jdk50"/>

	   <antcall target="run-tests-aop-scoped" inheritRefs="true"/>
      <server:stop name="scoped-aop-jdk50"/>

      <delete file="${jboss.dist}/bin/pluggable-instrumentor.jar"/>
   </target>
   <target name="tests-aop-scoped-generated-advisor" depends="init"
      description="AOP tests requiring a native classloader hook for JDK 5.0">

      <!-- copy across the pluggable instrumentor -->
      <copy tofile="${jboss.dist}/bin/pluggable-instrumentor.jar" 
            file="${org.jboss.aop:pluggable-instrumentor:jar}"/>
      <create-config baseconf="all" newconf="scoped-aop-generated-advisor">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="deploy-hasingleton/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <server:start name="scoped-aop-generated-advisor"/>

       <run-junit junit.patternset="aop-with-classloader.includes"/>

      <server:stop name="scoped-aop-generated-advisor"/>

      <delete file="${jboss.dist}/bin/pluggable-instrumentor.jar"/>
   </target>
   <target name="run-tests-aop-scoped"
     description="AOP tests requiring a native classloader hook">
       <run-junit junit.patternset="aop-with-classloader.includes" junit.configuration="aop-scoped"/>
   </target>
  
   <!-- Test for ws-bpel integration -->
   <target name="tests-bpel">
      <!-- define tasks used in this target -->
      <taskdef name="webdbschema" classname="org.jbpm.bpel.ant.WebDBSchemaTask">
         <classpath refid="jbpm.bpel.classpath" />
      </taskdef>
      <taskdef name="webdeploy" classname="org.jbpm.bpel.ant.WebDeployTask">
         <classpath refid="jbpm.bpel.classpath" />
      </taskdef>
      <!-- Create the sso enabled tomcat config starting with the default config -->
      <create-config baseconf="default" newconf="jbpm-bpel">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <server:start name="jbpm-bpel"/>
      <webdbschema operation="create" host="${node0}"/>
      <webdeploy par="${build.lib}/bpel-hello.par" host="${node0}" />
      <run-junit junit.patternset="jbpm-bpel.includes" junit.configuration="tests-bpel"/>
      <webdbschema operation="drop" host="${node0}"/>
      <server:stop name="jbpm-bpel"/>
   </target>

   <!-- ============================================= JBM Targets ============================= -->
	
   <!--  Starts two servers, run few simultaneous tests, kill the server only once and get the results of all the tests  -->
   <target name="tests-jbossmessaging-cluster" depends="init"
   	   description="Run JBM in cluster">

  	  <delete dir="${jboss.dist}/server/jbm-cluster1" />
   	  <delete dir="${jboss.dist}/server/jbm-cluster2" />
      <create-config baseconf="all" newconf="jbm-cluster1">
         <patternset>
            <include name="conf/**"/>
            <include name="deploy/**"/>
            <include name="deployers/**"/>
            <include name="deploy-hasingleton/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>
      <create-config baseconf="all" newconf="jbm-cluster2">
         <patternset>
            <include name="conf/**"/>
             <include name="deploy/**"/>
             <include name="deployers/**"/>
             <include name="deploy-hasingleton/**"/>
             <include name="lib/**"/>
         </patternset>
      </create-config>

      <server:start name="jbm-cluster1"/>
      <server:start name="jbm-cluster2"/>

      <antcall target="exec-jbmcluster" inheritRefs="true"/>

      <!--  I'm not stopping jbm-cluster2 as this server will be killed during the test -->            
      <server:stop name="jbm-cluster1"/>
   	   
   </target>
   
  <!-- Test the Messaging JMS provider -->
  <target name="exec-jbmcluster">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
      <sysproperty key="jbosstest.useJBM" value="true"/>
      
      <sysproperty key="jbosstest.cluster.node0" value="${node0}"/>
      <sysproperty key="jbosstest.cluster.node0.http.url" value="${node0.http.url}"/>
      <sysproperty key="jbosstest.cluster.node0.jndi.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.cluster.node0.hajndi.url" value="${node0.hajndi.url}"/>
      <sysproperty key="jbosstest.cluster.node1" value="${node1}"/>
      <sysproperty key="jbosstest.cluster.node1.http.url" value="${node1.http.url}"/>
      <sysproperty key="jbosstest.cluster.node1.jndi.url" value="${node1.jndi.url}"/>
      <sysproperty key="jbosstest.cluster.node1.hajndi.url" value="${node1.hajndi.url}"/>

      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
    	    	
        <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${build.resources}/jbossmessaging"/>
        <pathelement location="${build.lib}/jbossmessagingtest.jar"/>
        <path refid="tests.classpath"/>
      </classpath>

      <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
      <sysproperty key="jboss-junit-configuration" value="tests-jbossmessaging-cluster"/>
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                 usefile="${junit.formatter.usefile}"
                 extension="-tests-jbossmessaging.xml"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">
         <fileset dir="${build.classes}">
            <patternset refid="jbossmessaging-clustering.includes"/>
         </fileset>
      </batchtest>
    </junit>
   </target>

   <!--
     | Run JMS tests against the Messaging JMS provider
   -->
   <target name="tests-hornetq" depends="init"
      description="Run JMS tests against the Messaging JMS provider">

      <!-- Create a separate messaging config -->
      <create-config baseconf="default" newconf="hornetq">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
			   <include name="lib/**"/>
         </patternset>
      </create-config>
	   <server:start name="hornetq"/>
      <antcall target="tests-hornetq-unit" inheritRefs="true"/>
      <server:stop name="hornetq"/>
   </target>



  <!-- Test the Messaging JMS provider -->
  <target name="tests-hornetq-unit" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
      printsummary="${junit.printsummary}"
      haltonerror="${junit.haltonerror}"
      haltonfailure="${junit.haltonfailure}"
      fork="${junit.fork}"
      timeout="${junit.timeout}"
      jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
      <sysproperty key="jbosstest.useJBM" value="true"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

        <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${build.resources}/jbossmessaging"/>
        <pathelement location="${build.lib}/jbossmessagingtest.jar"/>
        <path refid="tests.classpath"/>
      </classpath>

      <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
      <sysproperty key="jboss-junit-configuration" value="tests-jbossmessaging"/>
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                 usefile="${junit.formatter.usefile}"
                 extension="-tests-jbossmessaging.xml"/>

      <batchtest todir="${build.reports}"
        haltonerror="${junit.batchtest.haltonerror}"
        haltonfailure="${junit.batchtest.haltonfailure}"
        fork="${junit.batchtest.fork}">
         <fileset dir="${build.classes}">
            <patternset refid="jbossmessaging.includes"/>
         </fileset>
      </batchtest>
    </junit>
   </target>
  
   <!-- ========================================= END JBM Targets ============================= -->
   
	<!-- Convenience target to run both single-node and clustered classloader 
	     leak tests. See JBAS-7247. -->
   <target name="tests-all-classloader-leak" depends="maybejars">
     <antcall target="tests-classloader-leak" inheritRefs="true"/>
     <antcall target="tests-clustered-classloader-leak" inheritRefs="true"/>
     <antcall target="tests-report"/>
   </target>

	<!-- Single-node classloader leak tests -->
	<target name="tests-classloader-leak" depends="init">

    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <create-config baseconf="all" newconf="classloader-leak">
      <patternset>
        <include name="conf/**"/>
        <include name="deploy/**"/>
        <include name="deployers/**"/>
        <include name="lib/**"/>
      </patternset>
    </create-config>
    <server:start name="classloader-leak"/>
    
    <junit dir="${module.output}" printsummary="${junit.printsummary}" haltonerror="${junit.haltonerror}" haltonfailure="${junit.haltonfailure}" fork="${junit.fork}"
      timeout="${junit.timeout}" jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <!-- Used for JGroups -->
      <jvmarg value="-Dbind.address=${node0}"/>
      <sysproperty key="jboss.dist" value="${jboss.dist}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      <!-- Pass along any jbosstest.* system properties -->
      <syspropertyset>
        <propertyref prefix="jbosstest."/>
      </syspropertyset>
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>
      
      <!--sysproperty key="jboss-junit-configuration" value="classloader-leak"/-->
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter" usefile="${junit.formatter.usefile}" extension="-ClassloaderLeak.xml"/>

      <batchtest todir="${build.reports}" haltonerror="${junit.batchtest.haltonerror}" haltonfailure="${junit.batchtest.haltonfailure}" fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <patternset refid="classloader-leak.includes"/>
          <patternset refid="badtest.excludes"/>
        </fileset>
      </batchtest>
    </junit>
    
    <server:stop  name="classloader-leak"/>
    
  </target>

  <!-- script tests -->
 <target name="tests-scripts" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    
    <create-config baseconf="all" newconf="scripts">
      <patternset>
		<include name="conf/**"/>
		<include name="deploy/**"/>
		<include name="deployers/**"/>
		<include name="deploy-hasingleton/**"/>
		<include name="farm/**"/>
		<include name="lib/**"/>
      </patternset>
   </create-config>
    <server:start name="scripts"/>
	    
    <!-- script tests which require a started server -->
    <junit dir="${module.output}" printsummary="${junit.printsummary}" haltonerror="${junit.haltonerror}" haltonfailure="${junit.haltonfailure}" fork="${junit.fork}"
	   timeout="${junit.timeout}" jvm="${junit.jvm}">
	      
      <jvmarg value="${junit.jvm.options}"/>
      <!-- Used for JGroups -->
      <jvmarg value="-Dbind.address=${node0}"/>
      <sysproperty key="jboss.dist" value="${jboss.dist}"/>
      <sysproperty key="jbosstest.server.config" value="scripts"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      <!-- Pass along any jbosstest.* system properties -->
      <syspropertyset>
		<propertyref prefix="jbosstest."/>
      </syspropertyset>
      <classpath>
		<pathelement location="${build.classes}"/>
		<pathelement location="${build.resources}"/>
		<path refid="tests.classpath"/>
      </classpath>
	      
      <!--sysproperty key="jboss-junit-configuration" value="classloader-leak"/-->
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter" usefile="${junit.formatter.usefile}" extension="-scripts.xml"/>
	      
      <batchtest todir="${build.reports}" haltonerror="${junit.batchtest.haltonerror}" haltonfailure="${junit.batchtest.haltonfailure}" fork="${junit.batchtest.fork}">
		
		<fileset dir="${build.classes}">
          <include name="**/test/scripts/test/TwiddleTestCase.class"/>
          <include name="**/test/scripts/test/ProbeTestCase.class"/>
          <include name="**/test/scripts/test/WsclientTestCase.class"/>
		</fileset>
      </batchtest>
    </junit>
    <server:stop  name="scripts"/>
   </target>
		
 <target name="tests-scripts-noserver" depends="init">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
	    
    <create-config baseconf="default" newconf="scripts-noserver">
      <patternset>
		<include name="conf/**"/>
		<include name="deploy/**"/>
		<include name="deployers/**"/>
		<include name="lib/**"/>
      </patternset>
    </create-config>
	    
    <!-- script tests which start their own servers -->
    <junit dir="${module.output}" printsummary="${junit.printsummary}" haltonerror="${junit.haltonerror}" haltonfailure="${junit.haltonfailure}" fork="${junit.fork}"
		   timeout="${junit.timeout}" jvm="${junit.jvm}">
	      
      <jvmarg value="${junit.jvm.options}"/>
      <!-- Used for JGroups -->
      <jvmarg value="-Dbind.address=${node0}"/>
      <sysproperty key="jboss.dist" value="${jboss.dist}"/>
      <sysproperty key="jbosstest.server.config" value="scripts-noserver"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="build.testlog" value="${build.testlog}"/>
      <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
      <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
      <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
      <!-- Pass along any jbosstest.* system properties -->
     <syspropertyset>
		<propertyref prefix="jbosstest."/>
      </syspropertyset>
      <classpath>
		<pathelement location="${build.classes}"/>
		<pathelement location="${build.resources}"/>
		<path refid="tests.classpath"/>
      </classpath>
	      
      <!--sysproperty key="jboss-junit-configuration" value="classloader-leak"/-->
      <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter" usefile="${junit.formatter.usefile}" extension="-scripts-noserver.xml"/>
      
      <batchtest todir="${build.reports}" haltonerror="${junit.batchtest.haltonerror}" haltonfailure="${junit.batchtest.haltonfailure}" fork="${junit.batchtest.fork}">
	
	  <fileset dir="${build.classes}">
         <include name="**/test/scripts/test/RunTestCase.class"/>
         <include name="**/test/scripts/test/ShutdownTestCase.class"/>
         <include name="**/test/scripts/test/WsconsumeTestCase.class"/>
         <include name="**/test/scripts/test/WsprovideTestCase.class"/>
         <include name="**/test/scripts/test/WstoolsTestCase.class"/>
	  </fileset>
      </batchtest>
    </junit>
  </target>

   <!--
      | Run all database related tests
    -->
   <target name="tests-db" depends="run-db-tests, tests-report-html"/>

   <target name="run-db-tests" depends="init-paths, maybejars">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="jbosstest.iterationcount" value="2"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
         </classpath>

         <!-- formatter type="xml" usefile="${junit.formatter.usefile}"/ -->
         <sysproperty key="jboss-junit-configuration" value="tests-db"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
                 usefile="${junit.formatter.usefile}"
                 extension="-tests-db.xml"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="**/bank/**/*StressTestCase.class"/>
               <include name="**/bmp/**/*UnitTestCase.class"/>
               <include name="**/cmp2/**/*UnitTestCase.class"/>
               <include name="**/cmp2/**/*StressTestCase.class"/>
               <include name="**/dbtest/**/*UnitTestCase.class"/>
               <include name="**/deadlock/**/*StressTestCase.class"/>
               <include name="**/entityexc/**/*UnitTestCase.class"/>
               <include name="**/idgen/**/*UnitTestCase.class"/>
               <include name="**/perf/**/*UnitTestCase.class"/>
               <include name="**/testbean/**/*UnitTestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>


   <!--
      | Run testcases in a single directory by specifing the test directory
      | name in -Dtest=dirname in tests/dirname/test/**TestCase.class
    -->
   <target name="test" if="test" depends="init"
      description="Execute a single test.">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <!-- Remove the test.log so each run has a fresh log -->
      <delete file="${build.testlog}/test.log"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         showoutput="${junit.showoutput}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <jvmarg value="-Djava.security.manager"/>
         <jvmarg value="-Dbind.address=${env.MYTESTIP_1}"/>
         <jvmarg value="-Djava.security.policy==${build.resources}/client.policy"/>
         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="jbosstest.deploy.dir" value="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <sysproperty key="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <!-- Include for those tests that need common security resources -->
            <pathelement location="${build.resources}/security"/>
            <path refid="tests.classpath"/>
         </classpath>

         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/${test}/**/*TestCase.class"/>
               <patternset refid="badtest.excludes"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!--
      | Run iiop testcases in a single directory by specifing the test
      | directory name in -Dtest=dirname in tests/dirname/test/**TestCase.class
    -->
   <target name="iiop-test" depends="maybejars" if="test"
      description="Execute a single test.">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <!-- Remove the test.log so each run has a fresh log -->
      <delete file="${build.testlog}/test.log"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
         <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
         <jvmarg value="-Djacorb.orb.print_version=off"/>
         <jvmarg value="-Djacorb.log.default.verbosity=0"/>
         <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
         <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
         <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
         <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
         <jvmarg value="-DORBInitRef.NameService=corbaloc::${node0}:3528/JBoss/Naming/root"/>
         <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
         <jvmarg value="-Djava.security.manager"/>
         <sysproperty key="java.security.policy" value="${build.resources}/iiop/client.policy"/>
         <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <path refid="tests.classpath"/>
            <fileset refid="org.jboss.jbossas:jboss-as-iiop:jar"/>
         </classpath>

         <formatter type="xml" usefile="${junit.formatter.usefile}"/>

         <batchtest todir="${build.reports}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}">

            <fileset dir="${build.classes}">
               <include name="org/jboss/test/${test}/**/*TestCase.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

	<!-- run a specific group of tests using the specified server e.g.
        ./build.sh -Dserver=default -Dtest=tm test-with-server -->
	<target name="test-with-server" if="server" depends="init" 
			description="Execute a single test group with specified server config startup/shutdown">
		<echo message="starting server ${server}"/>
		<server:start name="${server}"/>
		<antcall target="test" inheritRefs="true"/>
		<server:stop name="${server}"/> 
	</target>

	<!-- run a specific test using the specified server e.g.
        ./build.sh -Dserver=default -Dtest=org.jboss.test.tm.test.TransactionLocalUnitTestCase one-test-with-server -->
	<target name="one-test-with-server" if="server" depends="init"
			description="Execute a single test with specified server config startup/shutdown">
		<echo message="starting server ${server}"/>
		<server:start name="${server}"/>
		<antcall target="one-test" inheritRefs="true"/>
		<server:stop name="${server}"/>
	</target>

   <!--
      | Run a single testcase by specifing the fully qualified class name
      | of the unit test using the test property, -Dtest=org.jboss.test....
      | Here you specify the testcase class, not the directory
    -->
   <target name="one-test" depends="init" if="test"
      description="Execute a single test.">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <!-- Remove the test.log so each test has a fresh log -->
      <delete file="${build.testlog}/test.log"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
         showoutput="${junit.showoutput}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>

         <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xnoagent"/>
         <jvmarg value="-Djava.compiler=NONE"/>
         <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
         -->

         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <sysproperty key="jboss.dist" value="${jboss.dist}"/>
         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="jbosstest.secure" value="true"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.resource1.server.host" value="${node2}"/>
         <sysproperty key="jbosstest.resource2.server.host" value="${node3}"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />

         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <sysproperty key="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
         <sysproperty key="javax.net.ssl.trustStore"
            value="${build.resources}/security/tst.keystore"/>
         <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>
         <sysproperty key="jboss.vfs.forceCopy" value="true"/>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <!-- Include for those tests that need common security resources -->
            <pathelement location="${build.resources}/security"/>
            <path refid="tests.classpath"/>
         </classpath>

         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}"/>

         <test todir="${build.reports}" name="${test}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}"/>
      </junit>
   </target>

   <target name="one-test-debug" if="test"
      description="Execute a single test.">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <!-- Remove the test.log so each test has a fresh log -->
      <delete file="${build.testlog}/test.log"/>
      <junit dir="${module.output}"
        printsummary="${junit.printsummary}"
        haltonerror="${junit.haltonerror}"
        haltonfailure="${junit.haltonfailure}"
        fork="${junit.fork}"
        timeout="${junit.timeout}"
        jvm="${junit.jvm}">

          <jvmarg value="-verbose:gc"/>

          <jvmarg value="-Xdebug"/>
          <jvmarg value="-Xnoagent"/>
          <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8686"/>
          <jvmarg line="${junit.jvm.options}"/>

        <!-- Used for JGroups -->
        <jvmarg value="-Dbind.address=${node0}"/>
        <sysproperty key="jboss.dist" value="${jboss.dist}"/>
        <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
        <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
        <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
        <sysproperty key="jbosstest.server.host" value="${node0}"/>
        <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
        <sysproperty key="build.testlog" value="${build.testlog}"/>
        <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
        <sysproperty key="jbosstest.secure" value="true"/>
        <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
        <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
        <!-- Pass along any jbosstest.* system properties -->
        <syspropertyset>
           <propertyref prefix="jbosstest."/>
           <propertyref prefix="java.rmi."/>
           <propertyref prefix="node0"/>
           <propertyref prefix="node1"/>
        </syspropertyset>
        <sysproperty key="java.security.auth.login.config"
          value="${build.resources}/security/auth.conf"/>
        <sysproperty key="javax.net.ssl.trustStore"
          value="${build.resources}/security/tst.keystore"/>
        <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>

        <classpath>
          <pathelement location="${build.classes}"/>
          <pathelement location="${build.resources}"/>
          <!-- Include for those tests that need common security resources -->
          <pathelement location="${build.resources}/security"/>
          <path refid="tests.classpath"/>
        </classpath>

        <formatter type="plain" usefile="${junit.formatter.usefile}"/>
        <formatter type="xml" usefile="${junit.formatter.usefile}"/>

        <test todir="${build.reports}" name="${test}"
          haltonerror="${junit.batchtest.haltonerror}"
          haltonfailure="${junit.batchtest.haltonfailure}"
          fork="${junit.batchtest.fork}"/>
      </junit>
    </target>


   <!--
      | Run a single testcase by specifing the fully qualified class name
      | of the unit test using the test property, -Dtest=org.jboss.test....
      | Here you specify the testcase class, not the directory
    -->
   <target name="one-iiop-test" if="test"
      description="Execute a single test.">
      <mkdir dir="${build.reports}"/>
      <mkdir dir="${build.testlog}"/>
      <!-- Remove the test.log so each test has a fresh log -->
      <delete file="${build.testlog}/test.log"/>
      <junit dir="${module.output}"
         printsummary="${junit.printsummary}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         fork="${junit.fork}"
         timeout="${junit.timeout}"
      	 showoutput="${junit.showoutput}"
         jvm="${junit.jvm}">

         <jvmarg line="${junit.jvm.options}"/>
<!--         <jvmarg value="-Xdebug"/>-->
<!--         <jvmarg value="-Xnoagent"/>-->
<!--         <jvmarg value="-Djava.compiler=NONE"/>-->
<!--         <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
         <!-- Used for JGroups -->
         <jvmarg value="-Dbind.address=${node0}"/>
         <jvmarg value="-Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB"/>
         <jvmarg value="-Dorg.omg.CORBA.ORBSingletonClass=org.jacorb.orb.ORBSingleton"/>
         <jvmarg value="-Djacorb.orb.print_version=off"/>
         <jvmarg value="-Djacorb.log.default.verbosity=0"/>
         <jvmarg value="-Djacorb.interop.strict_check_on_tc_creation=off"/>
         <jvmarg value="-Djacorb.log.loggerFactory=org.jboss.util.Log4jLoggerFactory"/>
         <jvmarg value="-Djacorb.security.ssl.client.supported_options=0"/>
         <jvmarg value="-Djacorb.security.ssl.client.required_options=0"/>
         <jvmarg value="-DORBInitRef.NameService=corbaloc::${node0}:3528/JBoss/Naming/root"/>
         <jvmarg value="-Dorg.omg.PortableInterceptor.ORBInitializerClass.org.jboss.tm.iiop.TxClientInterceptorInitializer"/>
         <jvmarg value="-Djava.security.manager"/>
         <jvmarg value="-Djava.security.policy==${build.resources}/iiop/client.policy"/>
         <sysproperty key="java.endorsed.dirs" value="${jboss.dist}/lib/endorsed"/>
         <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
         <sysproperty key="build.testlog" value="${build.testlog}"/>
         <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
         <sysproperty key="jbosstest.secure" value="true"/>
         <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
         <sysproperty key="jbosstest.server.host" value="${node0}"/>
         <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
         <sysproperty key="jbosstest.resource1.server.host" value="${node2}"/>
         <sysproperty key="jbosstest.resource2.server.host" value="${node3}"/>
         <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
         <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
         <!-- Pass along any jbosstest.* system properties -->
         <syspropertyset>
            <propertyref prefix="jbosstest."/>
         </syspropertyset>
         <sysproperty key="java.security.auth.login.config"
            value="${build.resources}/security/auth.conf"/>
         <sysproperty key="javax.net.ssl.trustStore"
            value="${build.resources}/security/tst.keystore"/>
         <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>

         <classpath>
            <pathelement location="${build.classes}"/>
            <pathelement location="${build.resources}"/>
            <!-- Include for those tests that need common security resources -->
            <pathelement location="${build.resources}/security"/>
            <path refid="tests.classpath"/>
         </classpath>

         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <formatter type="plain" usefile="${junit.formatter.usefile}"/>

         <test todir="${build.reports}" name="${test}"
            haltonerror="${junit.batchtest.haltonerror}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            fork="${junit.batchtest.fork}"/>
      </junit>
   </target>

   <!-- Misc tests of the testing framework itself
   -->
   <target name="tests-apache"
      description="Test that apache can be started/stopped from ant">
      <apache location="${apache.location}" action-type="start"/>
      <start-sleep seconds="15"/>
      <apache location="${apache.location}" action-type="stop"/>
      <start-sleep seconds="5"/>
   </target>

   <target name="tests-jboss-cluster"
      description="Test that two jboss cluster nodes can be started/stopped from ant">
      <server:start name="node0"/>
      <server:start name="node1"/>
      <start-sleep seconds="60"/>
      <server:stop name="node0"/>
      <server:stop name="node1"/>
   </target>

   <property name="aspects.root" value="${project.root}/aspects"/>

  <!-- Aspects tests are not used
   <target name="tests-aspects"	description="Runs the aspects tests against ALL configuration">
      <ant antfile="${aspects.root}/build-test50.xml" inheritAll="false" dir="${aspects.root}"/>
      <ant antfile="${aspects.root}/build-test50.xml" inheritAll="false" dir="${aspects.root}" target="tests">
      	<property name="node0" value="${node0}"/>
   	</ant>
   </target>
  -->

   <target name="validate-server-configs" depends="init"
      description="Validate the start/stop of the testsuite server configs">
      <!-- minimal -->
      <server:start name="minimal"/>
      <copy file="${build.lib}/shutdown.sar"
         todir="${jboss.dist}/server/minimal/deploy" />
      <echo message="Minimal server started, stopping"/>
      <sleep seconds="5"/>
      <delete file="${jboss.dist}/server/minimal/deploy/shutdown.sar" />
      <sleep seconds="7"/>

      <!-- minimal -->
      <server:start name="all"/>
      <server:stop name="all"/>

      <!-- tests-apache-tomcat-clustering -->
      <create-cluster-node conf="node0"/>
      <server:start name="node0" />
      <create-cluster-node conf="node1"/>
      <server:start name="node1"/>

      <server:stop name="node0"/>
      <server:stop name="node1"/>
      <apache location="${apache.location}" action-type="stop"/>

      <!-- Test the default UDP stack -->
      <antcall target="tests-clustering-configure" inheritRefs="true">
         <param name="jboss-junit-configuration" value="udp"/>
      </antcall>
      <server:start name="cluster-udp-0"/>
      <server:start name="cluster-udp-1"/>
      <server:stop name="cluster-udp-0"/>
      <server:stop name="cluster-udp-1"/>

      <!-- Test a TCP stack.-->
      <antcall target="tests-clustering-configure" inheritRefs="true">
         <param name="jboss-junit-configuration" value="tcp"/>
      </antcall>
      <server:start name="cluster-tcp-0"/>
      <server:start name="cluster-tcp-1"/>
      <server:stop name="cluster-tcp-0"/>
      <server:stop name="cluster-tcp-1"/>

      <!-- Create the sso enabled tomcat config starting with the all config -->
      <create-cluster-sso-node newconf="tomcat-sso-cluster0"/>
      <create-cluster-sso-node newconf="tomcat-sso-cluster1"/>

      <echo message="Modifying the node0 and node1 Tomcat configuration for REPL_SYNC/UseJK"/>
      <http-cluster-node-config-change conf="tomcat-sso-cluster0"/>
      <http-cluster-node-config-change conf="tomcat-sso-cluster1"/>

      <server:start name="tomcat-sso-cluster0"/>
      <server:start name="tomcat-sso-cluster1"/>

      <server:stop name="tomcat-sso-cluster0"/>
      <server:stop name="tomcat-sso-cluster1"/>

      <!-- tomcat-webctx -->
      <create-config baseconf="default" newconf="tomcat-webctx"
         newconf-src="tomcat-webctx">
         <patternset>
            <include name="conf/**"/>
            <include name="deployers/**"/>
            <include name="deploy/**"/>
            <include name="lib/**"/>
         </patternset>
      </create-config>

      <server:start name="tomcat-webctx"/>
      <server:stop name="tomcat-webctx"/>

      <!-- Test the example binding configuration -->
      <create-cluster-node conf="binding-manager1"/>
      <create-cluster-node conf="binding-manager2"/>
      <server:start name="binding-manager1"/>
      <server:start name="binding-manager2"/>

      <server:stop name="binding-manager1"/>
      <server:stop name="binding-manager2"/>
   </target>

   <!-- Reporting targets that generate reports from JUnit output.
   -->
   <target name="reports" depends="tests-report"
      description="Generates all reports."/>

   <target name="tests-report-clean">
      <delete dir="${build.reports}"/>
   </target>

   <target name="tests-report" depends="tests-report-html, tests-report-text, tests-report-xml" unless="skip.report">
      <tar tarfile="${module.output}/${TIMENOW}.tgz" compression="gzip" longfile="gnu">
         <tarfileset dir="${build.reports}/html" prefix="${TIMENOW}">
            <include name="**"/>
         </tarfileset>
      </tar>
   </target>

   <target name="tests-report-html" depends="compile-stylesheets" unless="skip.report">
      <mkdir dir="${build.reports}/html"/>
      <mkdir dir="${aspects.root}/output/reports"/>

      <junitreport todir="${build.reports}">
         <fileset dir="${build.reports}">
            <include name="TEST-*.xml"/>
         </fileset>
         <fileset dir="${aspects.root}/output/reports">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
            todir="${build.reports}/html"
            styledir="${build.stylesheets}"
            />
      </junitreport>
   </target>

   <!--
      | this currently spews logs of VariableReference crap, so it is turned
      | off by default.  Once this is fixed, it should be built after
      | tests-report-html
    -->
   <target name="tests-report-text" depends="tests-report-html" unless="skip.report">
      <mkdir dir="${build.reports}/text"/>

      <style basedir="${build.reports}"
         destdir="${build.reports}/text"
         extension=".txt"
         style="${build.stylesheets}/summary1b.xsl"
         includes="TESTS-TestSuites.xml">
         <param name="thedate" expression="${TIMENOW}"/>
         <param name="java_version" expression="${java.version}"/>
         <param name="java_vendor" expression="${java.vendor}"/>
         <param name="java_vm_specification_version" expression="${java.vm.specification.version}"/>
         <param name="java_vm_version" expression="${java.vm.version}"/>
         <param name="java_vm_name" expression="${java.vm.name}"/>
         <param name="java_vm_info" expression="${java.vm.info}"/>
         <param name="java_specification_version" expression="${java.specification.version}"/>
         <param name="java_class_version" expression="${java.class.version}"/>
         <param name="os_name" expression="${os.name}"/>
         <param name="os_arch" expression="${os.arch}"/>
         <param name="os_version" expression="${os.version}"/>
         <param name="builduid" expression="${TIMENOW}"/>
         <param name="results_web" expression="${results_web}"/>
      </style>
   </target>

   <target name="tests-report-xml" depends="tests-report-html" unless="skip.report">
      <mkdir dir="${build.reports}/xml"/>

      <style basedir="${build.reports}"
         destdir="${build.reports}/xml"
         extension=".xml"
         style="${build.stylesheets}/shortXmlSummary.xsl"
         includes="TESTS-TestSuites.xml">
         <param name="thedate" expression="${TIMENOW}"/>
         <param name="java_version" expression="${java.version}"/>
         <param name="java_vendor" expression="${java.vendor}"/>
         <param name="java_vm_specification_version"

            expression="${java.vm.specification.version}"/>
         <param name="java_vm_version" expression="${java.vm.version}"/>
         <param name="java_vm_name" expression="${java.vm.name}"/>
         <param name="java_vm_info" expression="${java.vm.info}"/>
         <param name="java_specification_version" expression="${java.specification.version}"/>
         <param name="java_class_version" expression="${java.class.version}"/>
         <param name="os_name" expression="${os.name}"/>
         <param name="os_arch" expression="${os.arch}"/>
         <param name="os_version" expression="${os.version}"/>
      </style>
   </target>

   <target name="tests-matrix" description="Executes only the version check compatibility suite. Use -Dmatrix-versions=[version container] for this task" depends="maybejars, init" if="matrix-versions"> 
     <fail message="Use -Dmatrix-versions=[version container] for this task" unless="matrix-versions"/>
     <fail message="Set -Djdk16= to a JDK1.6 installation" unless="HAVE_JDK_1.6"/>
     
     <!-- testing interoperating with clients using the unified invokers over jboss remoting -->
     <test-compatibility client-version="4_2_3_GA" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="4_2_x" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="5_0_0_GA" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="5_0_1_GA" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="5_0_x" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="5_1_0_GA" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="5_2_x" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
     <test-compatibility client-version="6_0_x" label="16c-16s" client-jdk="${jdk16}" server-jdk="${jdk16}" client-serialization-flag="-Dnone" serialization-flag="-Dnone"/>
   </target>

  <macrodef name="test-compatibility">
    <attribute name="client-version"/>
    <attribute name="label"/>
    <attribute name="client-jdk"/>
    <attribute name="server-jdk"/>
    <attribute name="client-serialization-flag"/>    
    <attribute name="serialization-flag"/>
    <sequential>
      <start-jboss conf="default" jvmargs="-Xmx128m -Xmx512m -XX:MaxPermSize=512m @{serialization-flag}" java.exec="@{server-jdk}/bin/java"/>
      <wait-on-host/>
      <antcall target="tests-standard-unit-matrix-version" inheritRefs="true">
        <param name="matrix-configuration" value="@{client-version}-@{label}"/>
	<param name="junit-jvm-command" value="@{client-jdk}/bin/java"/>
        <param name="current-version-dir" value="${matrix-versions}/@{client-version}"/>
        <param name="client-serialization-flag" value="@{client-serialization-flag}"/>
      </antcall>
      <stop-jboss jvmargs="@{serialization-flag}" java.exec="@{server-jdk}/bin/java"/>
      <sleep seconds="240"/>
    </sequential>
  </macrodef>
 
   <target name="tests-standard-unit-matrix-version" depends="init">
     <execute-matrix-unit test-name="testbyvalue" parameter-filter="org/jboss/test/testbyvalue/test/**/*TestCase.class"/>
     <execute-matrix-unit test-name="bmp" parameter-filter="org/jboss/test/bmp/**/*TestCase.class"/>
     <execute-matrix-unit test-name="cmp2" parameter-filter="org/jboss/test/cmp2/**/*TestCase.class"/>
   </target>
 
   <macrodef name="execute-matrix-unit">
     <attribute name="test-name"/>
     <attribute name="parameter-filter"/>
     <sequential>
       <!-- this requires antcall as a property can't be redefined -->
       <antcall target="execute-matrix-unit-target" inheritRefs="true">
         <param name="test-name" value="@{test-name}"/>
         <param name="parameter-filter" value="@{parameter-filter}"/>
       </antcall>
     </sequential>
   </macrodef>
 
   <target name="execute-matrix-unit-target">
     <echo message=">>>>>> Executing test=${test-name} filter=${parameter-filter}"/>
     <pathconvert pathSep="," dirSep="/" property="jbosstest.hometest">
       <path location="${build.classes}"/>
     </pathconvert>
 
     <pathconvert pathSep="," dirSep="/" property="jbosstest.executionlist">
       <path>
         <fileset dir="${build.classes}">
           <include name="${parameter-filter}"/>
           <!-- The following test excluded because they need jboss.jar to
                access the following classes not included with the client libs:
                org/jboss/ejb/plugins/cmp/jdbc/metadata/JDBCQueryMetaData
                org/jboss/metadata/ClientMetaData -->
           <exclude name="org/jboss/test/cmp2/commerce/QueryTest.class"/>
           <exclude name="org/jboss/test/cmp2/commerce/LimitOffsetTest.class"/>
           <exclude name="org/jboss/test/cmp2/commerce/CompleteUnitTestCase.class"/>
         </fileset>
       </path>
     </pathconvert>
 
     <junit dir="${module.output}" printsummary="${junit.printsummary}" haltonerror="${junit.haltonerror}" haltonfailure="${junit.haltonfailure}" fork="true"
       timeout="${junit.timeout}" jvm="${junit-jvm-command}">
 
       <jvmarg line="${junit.jvm.options}"/>
       <!-- Used for JGroups -->
       <jvmarg value="-Dbind.address=${node0}"/>
       <jvmarg value="${client-serialization-flag}"/>
       <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
       <sysproperty key="build.testlog" value="${build.testlog}"/>
       <sysproperty key="log4j.configuration" value="file:${build.resources}/log4j.xml"/>
       <sysproperty key="jboss-junit-configuration" value="${test-name}_${matrix-configuration}"/>
       <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
       <sysproperty key="jbosstest.server.host" value="${node0}"/>
       <sysproperty key="jbosstest.server.host.url" value="${node0.url}"/>
       <sysproperty key="java.net.preferIPv4Stack" value="${java.net.preferIPv4Stack}" />
       <sysproperty key="java.net.preferIPv6Addresses" value="${java.net.preferIPv6Addresses}" />
       <!-- Pass along any jbosstest.* system properties -->
       <syspropertyset>
         <propertyref prefix="jbosstest."/>
       </syspropertyset>
       <classpath>
         <pathelement location="${build.classes}"/>
         <pathelement location="${build.resources}"/>
         <fileset dir="${current-version-dir}" includes="*.jar"/>
         <path refid="tests.classpath"/>
         <path refid="tests.compile.classpath"/>
       </classpath>
       <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter" usefile="${junit.formatter.usefile}"
         extension="-${test-name}_${matrix-configuration}.xml"/>
 
       <batchtest todir="${build.reports}" haltonerror="${junit.batchtest.haltonerror}" haltonfailure="${junit.batchtest.haltonfailure}" fork="${junit.batchtest.fork}">
 
         <fileset dir="${build.classes}">
           <include name="org/jboss/test/compatibility/test/matrix/MatrixTestContainer.class"/>
         </fileset>
       </batchtest>
     </junit>
 
   </target>
</project>
